"use strict";(self.webpackChunk_monorail_storybook=self.webpackChunk_monorail_storybook||[]).push([[4557],{"../../node_modules/@mui/x-data-grid-premium/hooks/utils/useGridApiRef.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>useGridApiRef_useGridApiRef});var react=__webpack_require__("../../node_modules/react/index.js");const useGridApiRef_useGridApiRef=()=>react.useRef({})},"./src/DataGrid/DataGridPagination.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ApiRefPaginationGrid:()=>ApiRefPaginationGrid,AutoPaginationGrid:()=>AutoPaginationGrid,BasisPaginationGrid:()=>BasisPaginationGrid,ControlledPaginationGrid:()=>ControlledPaginationGrid,Default:()=>Default,ServerPaginationGrid:()=>ServerPaginationGrid,SizePaginationGrid:()=>SizePaginationGrid,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js"),_monorail_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../components/src/DataGrid/DataGrid.tsx"),_monorail_components__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@mui/x-data-grid-premium/hooks/utils/useGridApiRef.js"),_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/helpers/storybook.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Data Grid/Pagination",component:_monorail_components__WEBPACK_IMPORTED_MODULE_3__._},Template=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const apiRef=(0,_monorail_components__WEBPACK_IMPORTED_MODULE_4__.A)(),{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.PT)({dataSet:"Commodity",rowLength:1e3,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:800,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{apiRef,pagination:!0,checkboxSelection:!0,disableRowSelectionOnClick:!0,...args,...data})})})),Default=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)(Template);Default.parameters={docs:{description:{component:"Through pagination, a segment of data can be viewed from the assigned data source.\n\nBy default, the MIT  `DataGrid`  displays the rows with pagination, and up to 100 rows per page.\n\nOn the other hand, the commercial  `DataGridPro`  component displays, by default, all the rows with infinite scrolling (and virtualization) and without the 100 rows per page limitation. You need to set the  `pagination`  prop to enable the pagination feature in such a case.\n\n### Basic example"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const SizePaginationGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const[pageSize,setPageSize]=react__WEBPACK_IMPORTED_MODULE_0__.useState(5),[page,setPage]=react__WEBPACK_IMPORTED_MODULE_0__.useState(1),{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.PT)({dataSet:"Commodity",rowLength:100,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,pageSizeOptions:[5,10,20],onPaginationModelChange:({page,pageSize})=>{setPage(page),setPageSize(pageSize)},paginationModel:{pageSize,page},pagination:!0,...data})})}));SizePaginationGrid.storyName="Page size",SizePaginationGrid.parameters={docs:{description:{story:"-   The default page size is  `100`, you can change this value with the  `pageSize`  prop.\n-   You can configure the possible page size the user can choose from with the  `rowsPerPageOptions`  prop."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ControlledPaginationGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.PT)({dataSet:"Commodity",rowLength:100,maxColumns:6}),[page,setPage]=react__WEBPACK_IMPORTED_MODULE_0__.useState(0);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,onPaginationModelChange:({page})=>setPage(page),paginationModel:{page,pageSize:5},pageSizeOptions:[5],pagination:!0,...data})})}));ControlledPaginationGrid.storyName="Controlled pagination",ControlledPaginationGrid.parameters={docs:{description:{story:"While the previous demos show how the pagination can be uncontrolled, the active page can be controlled with the `page`/`onPageChange` props."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const AutoPaginationGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.PT)({dataSet:"Commodity",rowLength:100,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{autoPageSize:!0,pagination:!0,...args,...data})})}));AutoPaginationGrid.storyName="Auto size",AutoPaginationGrid.parameters={docs:{description:{story:"The `autoPageSize` prop allows to auto-scale the `pageSize` to match the container height and the max number of rows that can be displayed without a vertical scroll bar. By default, this feature is off."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ServerPaginationGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.PT)({dataSet:"Commodity",rowLength:100,maxColumns:6}),[page,setPage]=react__WEBPACK_IMPORTED_MODULE_0__.useState(0),[rows,setRows]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),[loading,setLoading]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{let active=!0;return(async()=>{setLoading(!0);const newRows=await function loadServerRows(page,data){return new Promise((resolve=>{setTimeout((()=>{resolve(data.rows.slice(5*page,5*(page+1)))}),500*Math.random()+100)}))}(page,data);active&&(setRows(newRows),setLoading(!1))})(),()=>{active=!1}}),[page,data]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,rows,columns:data.columns,pagination:!0,paginationModel:{pageSize:5,page},pageSizeOptions:[5],rowCount:100,paginationMode:"server",onPaginationModelChange:({page})=>setPage(page),loading})})}));ServerPaginationGrid.storyName="Server-side pagination",ServerPaginationGrid.parameters={docs:{description:{story:'By default, pagination works on the client-side. To switch it to server-side, set `paginationMode="server"`. You also need to set the `rowCount` prop so that the grid knows the total number of pages. Finally, you need to handle the `onPageChange` callback to load the rows for the corresponding page.\n\n**Note**: For more information regarding server-side pagination in combination with controlled selection check [here](https://mui.com/components/data-grid/selection/#usage-with-server-side-pagination)'}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const BasisPaginationGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));BasisPaginationGrid.storyName="Customization",BasisPaginationGrid.parameters={docs:{description:{story:"You can customize the rendering of the pagination in the footer following [the component section](https://mui.com/components/data-grid/components/#pagination) of the documentation.\n\n### Paginate > 100 rows\n\nThe  `DataGrid`  component can display up to 100 rows per page. The  `DataGridPro`  component removes this limitation. The following demo displays 200 rows per page:"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ApiRefPaginationGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));ApiRefPaginationGrid.storyName="apiRef",ApiRefPaginationGrid.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro`\n\nThe grid exposes a set of methods that enables all of these features using the imperative apiRef.\n\n> ⚠️ Only use this API when you have no alternative. Always start from the declarative API that the grid exposes.\n\n-   `setPageSize`: Set the number of rows in one page.\n-   `setPage`: Set the displayed page.\n-   `onPageChange`: Callback fired after a new page has been displayed.\n-   `onPageSizeChange`: Callback fired after the page size was changed.\n\nBelow is an example of how you can reset the page using the imperative  `setPage`  method."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"story(Template)",...Default.parameters?.docs?.source}}},SizePaginationGrid.parameters={...SizePaginationGrid.parameters,docs:{...SizePaginationGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const [pageSize, setPageSize] = React.useState<number>(5);\n  const [page, setPage] = React.useState(1);\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid {...args} pageSizeOptions={[5, 10, 20]} onPaginationModelChange={({\n      page,\n      pageSize\n    }) => {\n      setPage(page);\n      setPageSize(pageSize);\n    }} paginationModel={{\n      pageSize,\n      page\n    }} pagination {...data} />\n    </div>;\n})",...SizePaginationGrid.parameters?.docs?.source},description:{story:"Page size",...SizePaginationGrid.parameters?.docs?.description}}},ControlledPaginationGrid.parameters={...ControlledPaginationGrid.parameters,docs:{...ControlledPaginationGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6\n  });\n  const [page, setPage] = React.useState(0);\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid {...args} onPaginationModelChange={({\n      page\n    }) => setPage(page)} paginationModel={{\n      page,\n      pageSize: 5\n    }} pageSizeOptions={[5]} pagination {...data} />\n    </div>;\n})",...ControlledPaginationGrid.parameters?.docs?.source},description:{story:"Controlled pagination",...ControlledPaginationGrid.parameters?.docs?.description}}},AutoPaginationGrid.parameters={...AutoPaginationGrid.parameters,docs:{...AutoPaginationGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid autoPageSize pagination {...args} {...data} />\n    </div>;\n})",...AutoPaginationGrid.parameters?.docs?.source},description:{story:"Auto size",...AutoPaginationGrid.parameters?.docs?.description}}},ServerPaginationGrid.parameters={...ServerPaginationGrid.parameters,docs:{...ServerPaginationGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6\n  });\n  const [page, setPage] = React.useState(0);\n  const [rows, setRows] = React.useState<GridRowsProp>([]);\n  const [loading, setLoading] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    let active = true;\n    (async () => {\n      setLoading(true);\n      const newRows = await loadServerRows(page, data);\n      if (!active) {\n        return;\n      }\n      setRows(newRows);\n      setLoading(false);\n    })();\n    return () => {\n      active = false;\n    };\n  }, [page, data]);\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid {...args} rows={rows} columns={data.columns} pagination paginationModel={{\n      pageSize: 5,\n      page\n    }} pageSizeOptions={[5]} rowCount={100} paginationMode=\"server\" onPaginationModelChange={({\n      page\n    }) => setPage(page)} loading={loading} />\n    </div>;\n})",...ServerPaginationGrid.parameters?.docs?.source}}},BasisPaginationGrid.parameters={...BasisPaginationGrid.parameters,docs:{...BasisPaginationGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  // const { data } = useDemoData({\n  //   dataSet: 'Commodity',\n  //   rowLength: 1000,\n  //   maxColumns: 6,\n  // })\n\n  return <></>\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // <div style={{ height: 400, width: '100%' }}>\n  //   <DataGridPro pagination pageSize={200} rowsPerPageOptions={[200]} {...data} />\n  // </div>\n  ;\n})",...BasisPaginationGrid.parameters?.docs?.source},description:{story:"Cursor-based pagination\nCustomization - Paginate > 100 rows",...BasisPaginationGrid.parameters?.docs?.description}}},ApiRefPaginationGrid.parameters={...ApiRefPaginationGrid.parameters,docs:{...ApiRefPaginationGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // const apiRef = useGridApiRef();\n  // const { data } = useDemoData({\n  //   dataSet: 'Commodity',\n  //   rowLength: 10,\n  //   maxColumns: 6,\n  // });\n\n  // const handleClick = () => {\n  //   apiRef.current.setPage(1);\n  // };\n\n  return <></>\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // <div\n  //   style={{\n  //     width: '100%',\n  //   }}\n  // >\n  //   <Button color=\"primary\" variant=\"outlined\" onClick={handleClick}>\n  //     Set page 2\n  //   </Button>\n  //   <div style={{ height: 400, width: '100%', marginTop: 16 }}>\n  //     <DataGridPro\n  //       pagination\n  //       pageSize={5}\n  //       rowsPerPageOptions={[5]}\n  //       apiRef={apiRef}\n  //       {...data}\n  //     />\n  //   </div>\n  // </div>\n  ;\n})",...ApiRefPaginationGrid.parameters?.docs?.source},description:{story:"apiRef - Pagination",...ApiRefPaginationGrid.parameters?.docs?.description}}};const __namedExportsOrder=["Default","SizePaginationGrid","ControlledPaginationGrid","AutoPaginationGrid","ServerPaginationGrid","BasisPaginationGrid","ApiRefPaginationGrid"];try{SizePaginationGrid.displayName="SizePaginationGrid",SizePaginationGrid.__docgenInfo={description:"Page size",displayName:"SizePaginationGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridPagination.stories.tsx#SizePaginationGrid"]={docgenInfo:SizePaginationGrid.__docgenInfo,name:"SizePaginationGrid",path:"src/DataGrid/DataGridPagination.stories.tsx#SizePaginationGrid"})}catch(__react_docgen_typescript_loader_error){}try{ControlledPaginationGrid.displayName="ControlledPaginationGrid",ControlledPaginationGrid.__docgenInfo={description:"Controlled pagination",displayName:"ControlledPaginationGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridPagination.stories.tsx#ControlledPaginationGrid"]={docgenInfo:ControlledPaginationGrid.__docgenInfo,name:"ControlledPaginationGrid",path:"src/DataGrid/DataGridPagination.stories.tsx#ControlledPaginationGrid"})}catch(__react_docgen_typescript_loader_error){}try{AutoPaginationGrid.displayName="AutoPaginationGrid",AutoPaginationGrid.__docgenInfo={description:"Auto size",displayName:"AutoPaginationGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridPagination.stories.tsx#AutoPaginationGrid"]={docgenInfo:AutoPaginationGrid.__docgenInfo,name:"AutoPaginationGrid",path:"src/DataGrid/DataGridPagination.stories.tsx#AutoPaginationGrid"})}catch(__react_docgen_typescript_loader_error){}try{BasisPaginationGrid.displayName="BasisPaginationGrid",BasisPaginationGrid.__docgenInfo={description:"Customization - Paginate > 100 rows",displayName:"BasisPaginationGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridPagination.stories.tsx#BasisPaginationGrid"]={docgenInfo:BasisPaginationGrid.__docgenInfo,name:"BasisPaginationGrid",path:"src/DataGrid/DataGridPagination.stories.tsx#BasisPaginationGrid"})}catch(__react_docgen_typescript_loader_error){}try{ApiRefPaginationGrid.displayName="ApiRefPaginationGrid",ApiRefPaginationGrid.__docgenInfo={description:"apiRef - Pagination",displayName:"ApiRefPaginationGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridPagination.stories.tsx#ApiRefPaginationGrid"]={docgenInfo:ApiRefPaginationGrid.__docgenInfo,name:"ApiRefPaginationGrid",path:"src/DataGrid/DataGridPagination.stories.tsx#ApiRefPaginationGrid"})}catch(__react_docgen_typescript_loader_error){}}}]);