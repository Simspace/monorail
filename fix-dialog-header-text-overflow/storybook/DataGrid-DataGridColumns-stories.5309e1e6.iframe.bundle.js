"use strict";(self.webpackChunk_monorail_storybook=self.webpackChunk_monorail_storybook||[]).push([[3137],{"../../node_modules/@mui/icons-material/esm/Delete.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@mui/material/utils/createSvgIcon.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__=(0,_utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__.Z)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z"}),"Delete")},"../../node_modules/@mui/icons-material/esm/FileCopy.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@mui/material/utils/createSvgIcon.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__=(0,_utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__.Z)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm-1 4 6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2zm-1 7h5.5L14 6.5z"}),"FileCopy")},"../../node_modules/@mui/styles/createStyles/createStyles.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function createStyles(styles){return styles}__webpack_require__.d(__webpack_exports__,{Z:()=>createStyles})},"./src/DataGrid/DataGridColumns.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ColumnFluidWidthGrid:()=>ColumnFluidWidthGrid,ColumnGroupsGrid:()=>ColumnGroupsGrid,ColumnMenuGrid:()=>ColumnMenuGrid,ColumnMinWidthGrid:()=>ColumnMinWidthGrid,ColumnOrderingGrid:()=>ColumnOrderingGrid,ColumnPinningGrid:()=>ColumnPinningGrid,ColumnSelectorGrid:()=>ColumnSelectorGrid,ColumnSizingGrid:()=>ColumnSizingGrid,ColumnSpanningGrid:()=>ColumnSpanningGrid,ColumnTypesGrid:()=>ColumnTypesGrid,ColumnWidthGrid:()=>ColumnWidthGrid,CustomColumnTypesGrid:()=>CustomColumnTypesGrid,Default:()=>Default,HeaderColumnsGrid:()=>HeaderColumnsGrid,RenderCellGrid:()=>RenderCellGrid,RenderExpandCellGrid:()=>RenderExpandCellGrid,RenderHeaderGrid:()=>RenderHeaderGrid,ValueFormatterGrid:()=>ValueFormatterGrid,ValueGetterGrid:()=>ValueGetterGrid,ValueParserGrid:()=>ValueParserGrid,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DataGridColumns_stories});var react=__webpack_require__("../../node_modules/react/index.js"),Delete=__webpack_require__("../../node_modules/@mui/icons-material/esm/Delete.js"),createSvgIcon=__webpack_require__("../../node_modules/@mui/material/utils/createSvgIcon.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const Security=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 1 3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11z"}),"Security");var FileCopy=__webpack_require__("../../node_modules/@mui/icons-material/esm/FileCopy.js"),makeStyles=__webpack_require__("../../node_modules/@mui/styles/makeStyles/makeStyles.js"),createStyles=__webpack_require__("../../node_modules/@mui/styles/createStyles/createStyles.js"),random_generator=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/services/random-generator.js"),useDemoData=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js"),DataGrid=__webpack_require__("../components/src/DataGrid/DataGrid.tsx"),Button=__webpack_require__("../components/src/Button/Button.tsx"),Popper=__webpack_require__("../components/src/Popper/Popper.tsx"),Paper=__webpack_require__("../components/src/Paper/Paper.tsx"),Typography=__webpack_require__("../components/src/Typography/Typography.tsx"),GridActionsCellItem=__webpack_require__("../../node_modules/@mui/x-data-grid/components/cell/GridActionsCellItem.js"),GridToolbar=__webpack_require__("../../node_modules/@mui/x-data-grid/components/toolbar/GridToolbar.js"),storybook=__webpack_require__("./src/helpers/storybook.ts");const DataGridColumns_stories={title:"Data Grid/Columns",component:DataGrid._,parameters:{creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}}},Template=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:250,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,columns:[{field:"username"},{field:"age"}],rows:[{id:1,username:"@MaterialUI",age:20}]})}))),Default=(0,storybook.yg)(Template);Default.parameters={docs:{description:{component:"Grid `columns` are defined with the `columns` prop. columns expects an array of objects. The columns should have this type: `GridColDef[]`.\n\n`field` is the only required property since it's the column identifier. It's also used to match with `GridRowData` values.\n\ninterface GridColDef {\n  /**\n   * The column identifier. It's used to match with [[GridRowData]] values.\n   */\n  field: string;\n  …\n}\n\nBy default, columns are ordered according to the order they are included in the `columns` array.\n\n⚠️ The `columns` prop should keep the same reference between two renders. The columns are designed to be definitions, to never change once the component is mounted. Otherwise, you take the risk of losing the column width state (if resized). You can create the array outside of the render function or memoize it."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const HeaderColumnsGrid=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:250,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,columns:[{field:"username",headerName:"Username",description:"The identification used by the person with access to the online service."},{field:"age",headerName:"Age"}],rows:[{id:1,username:"@MaterialUI",age:20}]})})),{parameters:{docs:{description:{story:"You can configure the headers with: \n\n- `headerName`: The title of the column rendered in the column header cell.\n- `description`: The description of the column rendered as tooltip if the column header name is not fully displayed."}}}}),ColumnWidthGrid=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:250,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,columns:[{field:"username",width:200},{field:"age"}],rows:[{id:1,username:"@MaterialUI",age:38}]})})),{parameters:{docs:{description:{story:"By default, the columns have a width of 100px. This is an arbitrary, easy-to-remember value. To change the width of a column, use the `width` property available in `GridColDef`."}}}}),ColumnMinWidthGrid=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:250,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,columns:[{field:"username",minWidth:150},{field:"age"}],rows:[{id:1,username:"@MaterialUI",age:38}]})})),{parameters:{docs:{description:{story:"By default, the columns have a minimum width of 50px. This is an arbitrary, easy-to-remember value. To change the minimum width of a column, use the `minWidth` property available in `GridColDef`."}}}}),ColumnFluidWidthGrid=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:250,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,columns:[{field:"id",flex:1,minWidth:150},{field:"username",width:200},{field:"age",flex:.3,minWidth:50}],rows:[{id:1,username:"@MaterialUI",age:20}]})})),{parameters:{docs:{description:{story:"Column fluidity or responsiveness can be by achieved by setting the `flex` property in `GridColDef`.\n\nThe `flex` property accepts a value between 0 and ∞. It works by dividing the remaining space in the grid among all `flex` columns in proportion to their flex value.\n\nFor example, consider a grid with a total width of 500px that has three columns: the first with width: 200; the second with `flex: 1`; and third with `flex: 0.5`. The first column will be 200px wide, leaving 300px remaining. The column with `flex: 1` is twice the size of `flex: 0.5`, which means that final sizes will be: 200px, 200px, 100px.\n\nTo set a minimum width for a `flex` column set the `minWidth` property in `GridColDef`.\n\n**Note**\n\n- `flex` doesn't work together with `width`. If you set both `flex` and `width` in `GridColDef`, `flex` will override `width`.\n- `flex` doesn't work if the combined width of the columns that have `width` is more than the width of the grid itself. If that is the case a scroll bar will be visible, and the columns that have `flex` will default back to their base value of 100px."}}}}),ColumnSizingGrid=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));ColumnSizingGrid.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro` (https://mui.com/components/data-grid/columns/#resizing)\n\nBy default, `DataGridPro` allows all columns to be resized by dragging the right portion of the column separator.\n\nTo prevent the resizing of a column, set `resizable: false` in the `GridColDef`. Alternatively, to disable all columns resize, set the prop `disableColumnResize={true}`.\n\nTo restrict resizing a column under a certain width set the `minWidth` property in `GridColDef`.\n\nTo capture changes in the width of a column there are two callbacks that are called:\n\n- `onColumnResize`: Called while a column is being resized.\n- `onColumnWidthChange`: Called after the width of a column is changed, but not during resizing."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const columns=[{field:"firstName",headerName:"First name",width:130},{field:"lastName",headerName:"Last name",width:130},{field:"fullName",headerName:"Full name",width:160,valueGetter:(_params,row)=>`${row.firstName??""} ${row.lastName??""}`,sortComparator:(v1,v2)=>v1.toString().localeCompare(v2.toString())}],rows=[{id:1,lastName:"Snow",firstName:"Jon"},{id:2,lastName:"Lannister",firstName:"Cersei"},{id:3,lastName:"Lannister",firstName:"Jaime"},{id:4,lastName:"Stark",firstName:"Arya"},{id:5,lastName:"Targaryen",firstName:"Daenerys"}],ValueGetterGrid=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:400,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{rows,columns,...args})})),{parameters:{docs:{description:{story:"Sometimes a column might not have a corresponding value, or you might want to render a combination of different fields.\n\nTo achieve that, set the `valueGetter` attribute of `GridColDef` as in the example below.\n\n**Note**: You need to set a `sortComparator` for the column sorting to work when setting the `valueGetter` attribute.\n\n    function getFullName(params) {\n      return `${params.getValue(params.id, 'firstName') || ''} ${\n        params.getValue(params.id, 'lastName') || ''\n      }`;\n    }\n\n    const columns: GridColDef[] = [\n      { field: 'firstName', headerName: 'First name', width: 130 },\n      { field: 'lastName', headerName: 'Last name', width: 130 },\n      {\n        field: 'fullName',\n        headerName: 'Full name',\n        width: 160,\n        valueGetter: getFullName,\n        sortComparator: (v1, v2, cellParams1, cellParams2) =>\n          getFullName(cellParams1).localeCompare(getFullName(cellParams2)),\n      },\n    ];\n\nThe value generated is used for filtering, sorting, rendering, etc unless overridden by a more specific configuration."}}}}),ValueFormatterGrid=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:300,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,rows:[{id:1,taxRate:.1},{id:2,taxRate:.2},{id:3,taxRate:.3}],columns:[{type:"number",field:"taxRate",headerName:"Tax Rate",width:150,valueFormatter:value=>`${Number(100*value).toLocaleString()} %`}]})})),{parameters:{docs:{description:{story:'The value formatter allows you to convert the value before displaying it. Common use cases include converting a JavaScript `Date` object to a date string or a `Number` into a formatted number (e.g. "1,000.50").\n\nIn the following demo, a formatter is used to display the tax rate\'s decimal value (e.g. 0.2) as a percentage (e.g. 20%).\n\nThe value generated is only used for rendering purposes. Filtering and sorting will not relay on the formatted value. Use the valueParser to support filtering.\n\nThe value generated is only used for rendering purposes. Filtering and sorting will not relay on the formatted value. Use the **valueParser** to support filtering.\n          '}}}}),ValueParserGrid=(0,storybook.yg)((args=>(0,jsx_runtime.jsx)("div",{style:{height:300,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,rows:[{id:1,taxRate:.1},{id:2,taxRate:.2},{id:3,taxRate:.3}],columns:[{type:"number",field:"taxRate",headerName:"Tax Rate",width:150,valueFormatter:value=>`${Number(100*value).toLocaleString()} %`,valueParser:value=>Number(value)/100}]})})),{parameters:{docs:{description:{story:'The value parser allows you to convert the user-entered value to another one used for filtering or editing. Common use cases include parsing date strings to JavaScript `Date` objects or formatted numbers (e.g. "1,000.50") into `Number`. It can be understood as the inverse of **valueFormatter**.\n\nIn the following demo, the tax rate is displayed as a percentage (e.g. 20%) but a decimal number is used as value (e.g. 0.2).\n          '}}}}),RenderCellGrid=(0,storybook.yg)((args=>{const columns=[{field:"date",headerName:"Year",width:150,renderCell:params=>(0,jsx_runtime.jsxs)("strong",{children:[params.value.getFullYear(),(0,jsx_runtime.jsx)(Button.zx,{variant:"contained",color:"primary",size:"small",style:{marginLeft:16},children:"Open"})]})}],rows=[{id:1,date:new Date(1979,0,1)},{id:2,date:new Date(1984,1,1)},{id:3,date:new Date(1992,2,1)}];return(0,jsx_runtime.jsx)("div",{style:{height:300,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{rows,columns,...args})})}),{parameters:{docs:{description:{story:'By default, the grid render the value as a string in the cell. It resolves the rendered output in the following order:\n\n1. `renderCell() => ReactElement`\n2. `valueFormatter() => string`\n3. `valueGetter() => string`\n4. `row[field]`\n\nThe `renderCell` method of the column definitions is similar to `valueFormatter`. However, it trades to be able to only render in a cell in exchange for allowing to return a React node (instead of a string).\n\n    const columns: GridColDef[] = [\n      {\n        field: \'date\',\n        headerName: \'Year\',\n        renderCell: (params: GridRenderCellParams) => (\n          <strong>\n            {(params.value as Date).getFullYear()}\n            <Button\n              variant="contained"\n              color="primary"\n              size="small"\n              style={{ marginLeft: 16 }}\n            >\n              Open\n            </Button>\n          </strong>\n        ),\n      },\n    ];\n\n**Note**: It is recommended to also set a `valueFormatter` providing a representation for the value to be used when [exporting](https://mui.com/components/data-grid/export/#export-custom-rendered-cells) the data.\n\n### Render edit cell\n\nThe `renderCell` render function allows customizing the rendered in "view mode" only. For the "edit mode", set the `renderEditCell` function to customize the edit component. Check the [editing page](https://mui.com/components/data-grid/editing) for more details about editing.\n'}}}}),useStyles=(0,makeStyles.Z)((()=>(0,createStyles.Z)({root:{alignItems:"center",lineHeight:"24px",width:"100%",height:"100%",position:"relative",display:"flex","& .cellValue":{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"}}})));const GridCellExpand=react.memo((function GridCellExpand(props){const{width,value}=props,wrapper=react.useRef(null),cellDiv=react.useRef(null),cellValue=react.useRef(null),[anchorEl,setAnchorEl]=react.useState(null),classes=useStyles(),[showFullCell,setShowFullCell]=react.useState(!1),[showPopper,setShowPopper]=react.useState(!1);return react.useEffect((()=>{if(showFullCell)return document.addEventListener("keydown",handleKeyDown),()=>{document.removeEventListener("keydown",handleKeyDown)};function handleKeyDown(nativeEvent){"Escape"!==nativeEvent.key&&"Esc"!==nativeEvent.key||setShowFullCell(!1)}}),[setShowFullCell,showFullCell]),(0,jsx_runtime.jsxs)("div",{ref:wrapper,className:classes.root,onMouseEnter:()=>{const isCurrentlyOverflown=function isOverflown(element){return element.scrollHeight>element.clientHeight||element.scrollWidth>element.clientWidth}(cellValue.current);setShowPopper(isCurrentlyOverflown),setAnchorEl(cellDiv.current),setShowFullCell(!0)},onMouseLeave:()=>{setShowFullCell(!1)},children:[(0,jsx_runtime.jsx)("div",{ref:cellDiv,style:{height:1,width,display:"block",position:"absolute",top:0}}),(0,jsx_runtime.jsx)("div",{ref:cellValue,className:"cellValue",children:value}),showPopper&&(0,jsx_runtime.jsx)(Popper.r,{open:showFullCell&&null!==anchorEl,anchorEl,style:{width,marginLeft:-17},children:(0,jsx_runtime.jsx)(Paper.Xk,{elevation:1,style:{minHeight:wrapper.current.offsetHeight-3},children:(0,jsx_runtime.jsx)(Typography.ZT,{variant:"body2",style:{padding:8},children:value})})})]})}));function renderCellExpand(params){return(0,jsx_runtime.jsx)(GridCellExpand,{value:void 0!==params.value&&null!==params.value?params.value.toString():"",width:params.colDef.computedWidth})}renderCellExpand.displayName="renderCellExpand";const RenderExpandCellGrid=(0,storybook.yg)((args=>{const columns=[{field:"col1",headerName:"Column 1",width:80,renderCell:renderCellExpand},{field:"col2",headerName:"Column 2",width:100,renderCell:renderCellExpand},{field:"col3",headerName:"Column 3",width:150,renderCell:renderCellExpand}];return(0,jsx_runtime.jsx)("div",{style:{height:300,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{rows:[{id:1,col1:"Hello",col2:"World",col3:"In publishing and graphic design, Lorem ipsum is a placeholder text commonly used."},{id:2,col1:"DataGridPro",col2:"is Awesome",col3:"In publishing and graphic design, Lorem ipsum is a placeholder text or a typeface without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available."},{id:3,col1:"Material-UI",col2:"is Amazing",col3:"Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available."},{id:4,col1:"Hello",col2:"World",col3:"In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form."},{id:5,col1:"DataGridPro",col2:"is Awesome",col3:"Typeface without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available."},{id:6,col1:"Material-UI",col2:"is Amazing",col3:"Lorem ipsum may be used as a placeholder before final copy is available."}],columns,...args})})}),{parameters:{docs:{description:{story:"By default, the grid cuts the content of a cell and renders an ellipsis if the content of the cell does not fit in the cell. As a workaround, you can create a cell renderer that will allow seeing the full content of the cell in the grid."}}}}),RenderHeaderGrid=(0,storybook.yg)((args=>{const columns=[{field:"date",width:150,type:"date",renderHeader:()=>(0,jsx_runtime.jsxs)("strong",{children:["Birthday ",(0,jsx_runtime.jsx)("span",{role:"img","aria-label":"enjoy",children:"🎂"})]})}],rows=[{id:1,date:new Date(1979,0,1)},{id:2,date:new Date(1984,1,1)},{id:3,date:new Date(1992,2,1)}];return(0,jsx_runtime.jsx)("div",{style:{height:300,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{rows,columns,...args})})}),{parameters:{docs:{description:{story:"You can customize the look of each header with the renderHeader method. It takes precedence over the headerName property.\n\n    const columns: GridColDef[] = [\n      {\n        field: 'date',\n        width: 150,\n        type: 'date',\n        renderHeader: (params: GridColumnHeaderParams) => (\n          <strong>\n            {'Birthday '}\n            <span role=\"img\" aria-label=\"enjoy\">\n              🎂\n            </span>\n          </strong>\n        ),\n      },\n    ];\n\n### Styling header\n\nYou can check the  [styling header](https://mui.com/components/data-grid/style/#styling-column-headers)  section for more information.\n\n### Styling cells\n\nYou can check the  [styling cells](https://mui.com/components/data-grid/style/#styling-cells)  section for more information."}}}}),initialRows=[{id:1,name:"Damien",age:25,dateCreated:(0,random_generator.vx)(),lastLogin:(0,random_generator.ub)(),isAdmin:!0,country:"Spain"},{id:2,name:"Nicolas",age:36,dateCreated:(0,random_generator.vx)(),lastLogin:(0,random_generator.ub)(),isAdmin:!1,country:"France"},{id:3,name:"Kate",age:19,dateCreated:(0,random_generator.vx)(),lastLogin:(0,random_generator.ub)(),isAdmin:!1,country:"Brazil"}],ColumnTypesGrid=(0,storybook.yg)((args=>{const[rows,setRows]=react.useState(initialRows),deleteUser=react.useCallback((id=>()=>{setRows((prevRows=>prevRows.filter((row=>row.id!==id))))}),[]),toggleAdmin=react.useCallback((id=>()=>{setRows((prevRows=>prevRows.map((row=>row.id===id?{...row,isAdmin:!row.isAdmin}:row))))}),[]),duplicateUser=react.useCallback((id=>()=>{setRows((prevRows=>{const rowToDuplicate=prevRows.find((row=>row.id===id));return[...prevRows,{...rowToDuplicate,id:Date.now()}]}))}),[]),columns=react.useMemo((()=>[{field:"name",type:"string"},{field:"age",type:"number"},{field:"dateCreated",type:"date",width:130},{field:"lastLogin",type:"dateTime",width:180},{field:"isAdmin",type:"boolean",width:120},{field:"country",type:"singleSelect",width:120,valueOptions:["Bulgaria","Netherlands","France","United Kingdom","Spain","Brazil"]},{field:"actions",type:"actions",width:80,getActions:params=>[(0,jsx_runtime.jsx)(GridActionsCellItem.u,{icon:(0,jsx_runtime.jsx)(Delete.Z,{}),label:"Delete",onClick:deleteUser(params.id)},"Delete"),(0,jsx_runtime.jsx)(GridActionsCellItem.u,{icon:(0,jsx_runtime.jsx)(Security,{}),label:"Toggle Admin",onClick:toggleAdmin(params.id),showInMenu:!0},"Toggle Admin"),(0,jsx_runtime.jsx)(GridActionsCellItem.u,{icon:(0,jsx_runtime.jsx)(FileCopy.Z,{}),label:"Duplicate User",onClick:duplicateUser(params.id),showInMenu:!0},"Duplicate User")]}]),[deleteUser,toggleAdmin,duplicateUser]);return(0,jsx_runtime.jsx)("div",{style:{height:300,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{columns,rows,...args})})}));ColumnTypesGrid.parameters={docs:{description:{story:"To facilitate configuration of the columns, some column types are predefined. By default, columns are assumed to hold strings, so the default column string type will be applied. As a result, column sorting will use the string comparator, and the column content will be aligned to the left side of the cell.\n\nThe following are the native column types:\n\n- `'string'` (default)\n- `'number'`\n- `'date'`\n- `'dateTime'`\n- `'boolean'`\n- `'singleSelect'`\n- `'actions'` \n\nTo use most of the column types, you only need to define the `type` property in your column definition. However, some types require additional properties to be set to make them work correctly:\n\n- If the column type is `'singleSelect'`, you also need to set the `valueOptions` property in the respective column definition.\n\n\n{\n  field: 'country',\n  type: 'singleSelect',\n  valueOptions: ['United Kingdom', 'Spain', 'Brazil']\n}\n\n\n- If the column type is `'actions'`, you need to provide a `getActions` function that returns an array of actions available for each row (React elements). You can add the `showInMenu` prop on the returned React elements to signal the data grid to group these actions inside a row menu.\n\n\n{\n  field: 'actions',\n  type: 'actions',\n  getActions: (params: GridRowParams) => [\n    <GridActionsCellItem icon={...} onClick={...} label=\"Delete\">,\n    <GridActionsCellItem icon={...} onClick={...} label=\"Print\" showInMenu>,\n  ]\n}"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const currencyFormatter=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}),usdPrice={type:"number",width:130,valueFormatter:({value})=>currencyFormatter.format(Number(value)),cellClassName:"font-tabular-nums"},useCustomColumnTypesGridStyles=(0,makeStyles.Z)({root:{"& .font-tabular-nums":{fontVariantNumeric:"tabular-nums"}}}),CustomColumnTypesGrid=(0,storybook.yg)((args=>{const rows=[{id:1,status:(0,random_generator.hz)(),subTotal:(0,random_generator.pt)(),total:(0,random_generator.pt)()},{id:2,status:(0,random_generator.hz)(),subTotal:(0,random_generator.pt)(),total:(0,random_generator.pt)()},{id:3,status:(0,random_generator.hz)(),subTotal:(0,random_generator.pt)(),total:(0,random_generator.pt)()}],classes=useCustomColumnTypesGridStyles();return(0,jsx_runtime.jsx)("div",{style:{height:300,width:"100%"},className:classes.root,children:(0,jsx_runtime.jsx)(DataGrid._,{...args,columns:[{field:"status",width:130},{field:"subTotal",...usdPrice},{field:"total",...usdPrice}],rows})})}));CustomColumnTypesGrid.storyName="Custom column types",CustomColumnTypesGrid.parameters={docs:{description:{story:"You can extend the native column types with your own by simply spreading the necessary properties.\n      \nThe demo below defines a new column type: `usdPrice` that extends the native `number` column type. \n\nconst usdPrice: GridColTypeDef = {\n  type: 'number',\n  width: 130,\n  valueFormatter: ({ value }) => valueFormatter.format(Number(value)),\n  cellClassName: 'font-tabular-nums',\n};"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ColumnMenuGrid=(0,storybook.yg)((args=>{const{data}=(0,useDemoData.PT)({dataSet:"Commodity",rowLength:20,maxColumns:5});return(0,jsx_runtime.jsx)("div",{style:{height:400,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,...data,disableColumnMenu:!0})})}));ColumnMenuGrid.storyName="Column menu",ColumnMenuGrid.parameters={docs:{description:{story:"By default, each column header displays a column menu. The column menu allows actions to be performed in the context of the target column, e.g. filtering. To disable the column menu, set the prop `disableColumnMenu={true}`."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ColumnSelectorGrid=(0,storybook.yg)((args=>{const{data}=(0,useDemoData.PT)({dataSet:"Commodity",rowLength:10,maxColumns:10});return(0,jsx_runtime.jsx)("div",{style:{height:400,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{...args,...data,slots:{toolbar:GridToolbar.n}})})}));ColumnSelectorGrid.storyName="Column selector",ColumnSelectorGrid.parameters={docs:{description:{story:'To enable the the toolbar you need to add `Toolbar: GridToolbar` to the grid `components` prop.\n\nIn addition, the column selector can be shown by using the "Show columns" menu item in the column menu.\n\nThe user can choose which columns are visible using the column selector from the toolbar.\n\nTo disable the column selector, set the prop `disableColumnSelector={true}`.\n'}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ColumnOrderingGrid=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));ColumnOrderingGrid.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro` (https://mui.com/components/data-grid/columns/#column-reorder)\n\nBy default, `DataGridPro` allows all column reordering by dragging the header cells and moving them left or right.\n\nBy default, `DataGridPro` allows all column reordering by dragging the header cells and moving them left or right.\n\nTo disable reordering on all columns, set the prop `disableColumnReorder={true}`.\n    \nTo disable reordering in a specific column, set the `disableReorder` property to true in the `GridColDef` of the respective column.\n\nIn addition, column reordering emits the following events that can be imported:\n\n- `columnHeaderDragStart`: emitted when dragging of a header cell starts.\n- `columnHeaderDragEnter`: emitted when the cursor enters another header cell while dragging.\n- `columnHeaderDragOver`: emitted when dragging a header cell over another header cell.\n- `columnHeaderDragEnd`: emitted when dragging of a header cell stops."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const ColumnGroupsGrid=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));ColumnGroupsGrid.parameters={docs:{description:{story:"🚧 This feature isn't implemented yet. It's coming.\n\n\nGrouping columns allows you to have multiple levels of columns in your header and the ability, if needed, to 'open and close' column groups to show and hide additional columns."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const ColumnPinningGrid=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));ColumnPinningGrid.parameters={docs:{description:{story:"🚧 This feature isn't implemented yet. It's coming.\n      \nSticky (or frozen, locked, or pinned) columns are columns that are visible at all times while the user scrolls the grid horizontally."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const ColumnSpanningGrid=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));ColumnSpanningGrid.parameters={docs:{description:{story:"🚧 This feature isn't implemented yet. It's coming.\n      \nEach cell takes up the width of one column. Column spanning allows to change this default behavior. It allows cells to span multiple columns. This is very close to the \"column spanning\" in an HTML `<table>`"}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"story(Template)",...Default.parameters?.docs?.source}}},HeaderColumnsGrid.parameters={...HeaderColumnsGrid.parameters,docs:{...HeaderColumnsGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const rows = [{\n    id: 1,\n    username: '@MaterialUI',\n    age: 20\n  }];\n  return <div style={{\n    height: 250,\n    width: '100%'\n  }}>\n        <DataGrid {...args} columns={[{\n      field: 'username',\n      headerName: 'Username',\n      description: 'The identification used by the person with access to the online service.'\n    }, {\n      field: 'age',\n      headerName: 'Age'\n    }]} rows={rows} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: `You can configure the headers with: \n\n- \\`headerName\\`: The title of the column rendered in the column header cell.\n- \\`description\\`: The description of the column rendered as tooltip if the column header name is not fully displayed.`\n      }\n    }\n  }\n})",...HeaderColumnsGrid.parameters?.docs?.source}}},ColumnWidthGrid.parameters={...ColumnWidthGrid.parameters,docs:{...ColumnWidthGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const rows = [{\n    id: 1,\n    username: '@MaterialUI',\n    age: 38\n  }];\n  return <div style={{\n    height: 250,\n    width: '100%'\n  }}>\n        <DataGrid {...args} columns={[{\n      field: 'username',\n      width: 200\n    }, {\n      field: 'age'\n    }]} rows={rows} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: 'By default, the columns have a width of 100px. This is an arbitrary, easy-to-remember value. To change the width of a column, use the `width` property available in `GridColDef`.'\n      }\n    }\n  }\n})",...ColumnWidthGrid.parameters?.docs?.source}}},ColumnMinWidthGrid.parameters={...ColumnMinWidthGrid.parameters,docs:{...ColumnMinWidthGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const rows = [{\n    id: 1,\n    username: '@MaterialUI',\n    age: 38\n  }];\n  return <div style={{\n    height: 250,\n    width: '100%'\n  }}>\n        <DataGrid {...args} columns={[{\n      field: 'username',\n      minWidth: 150\n    }, {\n      field: 'age'\n    }]} rows={rows} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: 'By default, the columns have a minimum width of 50px. This is an arbitrary, easy-to-remember value. To change the minimum width of a column, use the `minWidth` property available in `GridColDef`.'\n      }\n    }\n  }\n})",...ColumnMinWidthGrid.parameters?.docs?.source}}},ColumnFluidWidthGrid.parameters={...ColumnFluidWidthGrid.parameters,docs:{...ColumnFluidWidthGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const rows = [{\n    id: 1,\n    username: '@MaterialUI',\n    age: 20\n  }];\n  return <div style={{\n    height: 250,\n    width: '100%'\n  }}>\n        <DataGrid {...args} columns={[{\n      field: 'id',\n      flex: 1,\n      minWidth: 150\n    }, {\n      field: 'username',\n      width: 200\n    }, {\n      field: 'age',\n      flex: 0.3,\n      minWidth: 50\n    }]} rows={rows} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: `Column fluidity or responsiveness can be by achieved by setting the \\`flex\\` property in \\`GridColDef\\`.\n\nThe \\`flex\\` property accepts a value between 0 and ∞. It works by dividing the remaining space in the grid among all \\`flex\\` columns in proportion to their flex value.\n\nFor example, consider a grid with a total width of 500px that has three columns: the first with width: 200; the second with \\`flex: 1\\`; and third with \\`flex: 0.5\\`. The first column will be 200px wide, leaving 300px remaining. The column with \\`flex: 1\\` is twice the size of \\`flex: 0.5\\`, which means that final sizes will be: 200px, 200px, 100px.\n\nTo set a minimum width for a \\`flex\\` column set the \\`minWidth\\` property in \\`GridColDef\\`.\n\n**Note**\n\n- \\`flex\\` doesn't work together with \\`width\\`. If you set both \\`flex\\` and \\`width\\` in \\`GridColDef\\`, \\`flex\\` will override \\`width\\`.\n- \\`flex\\` doesn't work if the combined width of the columns that have \\`width\\` is more than the width of the grid itself. If that is the case a scroll bar will be visible, and the columns that have \\`flex\\` will default back to their base value of 100px.`\n      }\n    }\n  }\n})",...ColumnFluidWidthGrid.parameters?.docs?.source}}},ColumnSizingGrid.parameters={...ColumnSizingGrid.parameters,docs:{...ColumnSizingGrid.parameters?.docs,source:{originalSource:"story(() => {\n  return <></>;\n})",...ColumnSizingGrid.parameters?.docs?.source}}},ValueGetterGrid.parameters={...ValueGetterGrid.parameters,docs:{...ValueGetterGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n        <DataGrid rows={rows} columns={columns} {...args} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: `Sometimes a column might not have a corresponding value, or you might want to render a combination of different fields.\n\nTo achieve that, set the \\`valueGetter\\` attribute of \\`GridColDef\\` as in the example below.\n\n**Note**: You need to set a \\`sortComparator\\` for the column sorting to work when setting the \\`valueGetter\\` attribute.\n\n    function getFullName(params) {\n      return \\`\\${params.getValue(params.id, 'firstName') || ''} \\${\n        params.getValue(params.id, 'lastName') || ''\n      }\\`;\n    }\n\n    const columns: GridColDef[] = [\n      { field: 'firstName', headerName: 'First name', width: 130 },\n      { field: 'lastName', headerName: 'Last name', width: 130 },\n      {\n        field: 'fullName',\n        headerName: 'Full name',\n        width: 160,\n        valueGetter: getFullName,\n        sortComparator: (v1, v2, cellParams1, cellParams2) =>\n          getFullName(cellParams1).localeCompare(getFullName(cellParams2)),\n      },\n    ];\n\nThe value generated is used for filtering, sorting, rendering, etc unless overridden by a more specific configuration.`\n      }\n    }\n  }\n})",...ValueGetterGrid.parameters?.docs?.source}}},ValueFormatterGrid.parameters={...ValueFormatterGrid.parameters,docs:{...ValueFormatterGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const rows = [{\n    id: 1,\n    taxRate: 0.1\n  }, {\n    id: 2,\n    taxRate: 0.2\n  }, {\n    id: 3,\n    taxRate: 0.3\n  }];\n  const formatTaxRate: GridValueFormatter = (value: number) => {\n    const valueFormatted = Number(value * 100).toLocaleString();\n    return `${valueFormatted} %`;\n  };\n  return <div style={{\n    height: 300,\n    width: '100%'\n  }}>\n        <DataGrid {...args} rows={rows} columns={[{\n      type: 'number',\n      field: 'taxRate',\n      headerName: 'Tax Rate',\n      width: 150,\n      valueFormatter: formatTaxRate\n    }]} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: `The value formatter allows you to convert the value before displaying it. Common use cases include converting a JavaScript \\`Date\\` object to a date string or a \\`Number\\` into a formatted number (e.g. \"1,000.50\").\n\nIn the following demo, a formatter is used to display the tax rate's decimal value (e.g. 0.2) as a percentage (e.g. 20%).\n\nThe value generated is only used for rendering purposes. Filtering and sorting will not relay on the formatted value. Use the valueParser to support filtering.\n\nThe value generated is only used for rendering purposes. Filtering and sorting will not relay on the formatted value. Use the **valueParser** to support filtering.\n          `\n      }\n    }\n  }\n})",...ValueFormatterGrid.parameters?.docs?.source}}},ValueParserGrid.parameters={...ValueParserGrid.parameters,docs:{...ValueParserGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const rows = [{\n    id: 1,\n    taxRate: 0.1\n  }, {\n    id: 2,\n    taxRate: 0.2\n  }, {\n    id: 3,\n    taxRate: 0.3\n  }];\n  const formatTaxRate: GridValueFormatter = (value: number) => {\n    const valueFormatted = Number(value * 100).toLocaleString();\n    return `${valueFormatted} %`;\n  };\n  return <div style={{\n    height: 300,\n    width: '100%'\n  }}>\n        <DataGrid {...args} rows={rows} columns={[{\n      type: 'number',\n      field: 'taxRate',\n      headerName: 'Tax Rate',\n      width: 150,\n      valueFormatter: formatTaxRate,\n      valueParser: value => Number(value) / 100\n    }]} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: `The value parser allows you to convert the user-entered value to another one used for filtering or editing. Common use cases include parsing date strings to JavaScript \\`Date\\` objects or formatted numbers (e.g. \"1,000.50\") into \\`Number\\`. It can be understood as the inverse of **valueFormatter**.\n\nIn the following demo, the tax rate is displayed as a percentage (e.g. 20%) but a decimal number is used as value (e.g. 0.2).\n          `\n      }\n    }\n  }\n})",...ValueParserGrid.parameters?.docs?.source}}},RenderCellGrid.parameters={...RenderCellGrid.parameters,docs:{...RenderCellGrid.parameters?.docs,source:{originalSource:'story<DataGridProps>(args => {\n  const columns: Array<GridColDef> = [{\n    field: \'date\',\n    headerName: \'Year\',\n    width: 150,\n    renderCell: (params: GridRenderCellParams) => <strong>\n            {(params.value as Date).getFullYear()}\n            <Button variant="contained" color="primary" size="small" style={{\n        marginLeft: 16\n      }}>\n              Open\n            </Button>\n          </strong>\n  }];\n  const rows = [{\n    id: 1,\n    date: new Date(1979, 0, 1)\n  }, {\n    id: 2,\n    date: new Date(1984, 1, 1)\n  }, {\n    id: 3,\n    date: new Date(1992, 2, 1)\n  }];\n  return <div style={{\n    height: 300,\n    width: \'100%\'\n  }}>\n        <DataGrid rows={rows} columns={columns} {...args} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: `By default, the grid render the value as a string in the cell. It resolves the rendered output in the following order:\n\n1. \\`renderCell() => ReactElement\\`\n2. \\`valueFormatter() => string\\`\n3. \\`valueGetter() => string\\`\n4. \\`row[field]\\`\n\nThe \\`renderCell\\` method of the column definitions is similar to \\`valueFormatter\\`. However, it trades to be able to only render in a cell in exchange for allowing to return a React node (instead of a string).\n\n    const columns: GridColDef[] = [\n      {\n        field: \'date\',\n        headerName: \'Year\',\n        renderCell: (params: GridRenderCellParams) => (\n          <strong>\n            {(params.value as Date).getFullYear()}\n            <Button\n              variant="contained"\n              color="primary"\n              size="small"\n              style={{ marginLeft: 16 }}\n            >\n              Open\n            </Button>\n          </strong>\n        ),\n      },\n    ];\n\n**Note**: It is recommended to also set a \\`valueFormatter\\` providing a representation for the value to be used when [exporting](https://mui.com/components/data-grid/export/#export-custom-rendered-cells) the data.\n\n### Render edit cell\n\nThe \\`renderCell\\` render function allows customizing the rendered in "view mode" only. For the "edit mode", set the \\`renderEditCell\\` function to customize the edit component. Check the [editing page](https://mui.com/components/data-grid/editing) for more details about editing.\n`\n      }\n    }\n  }\n})',...RenderCellGrid.parameters?.docs?.source}}},RenderExpandCellGrid.parameters={...RenderExpandCellGrid.parameters,docs:{...RenderExpandCellGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const columns: Array<GridColDef> = [{\n    field: 'col1',\n    headerName: 'Column 1',\n    width: 80,\n    renderCell: renderCellExpand\n  }, {\n    field: 'col2',\n    headerName: 'Column 2',\n    width: 100,\n    renderCell: renderCellExpand\n  }, {\n    field: 'col3',\n    headerName: 'Column 3',\n    width: 150,\n    renderCell: renderCellExpand\n  }];\n  const rows = [{\n    id: 1,\n    col1: 'Hello',\n    col2: 'World',\n    col3: 'In publishing and graphic design, Lorem ipsum is a placeholder text commonly used.'\n  }, {\n    id: 2,\n    col1: 'DataGridPro',\n    col2: 'is Awesome',\n    col3: 'In publishing and graphic design, Lorem ipsum is a placeholder text or a typeface without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available.'\n  }, {\n    id: 3,\n    col1: 'Material-UI',\n    col2: 'is Amazing',\n    col3: 'Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available.'\n  }, {\n    id: 4,\n    col1: 'Hello',\n    col2: 'World',\n    col3: 'In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form.'\n  }, {\n    id: 5,\n    col1: 'DataGridPro',\n    col2: 'is Awesome',\n    col3: 'Typeface without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available.'\n  }, {\n    id: 6,\n    col1: 'Material-UI',\n    col2: 'is Amazing',\n    col3: 'Lorem ipsum may be used as a placeholder before final copy is available.'\n  }];\n  return <div style={{\n    height: 300,\n    width: '100%'\n  }}>\n        <DataGrid rows={rows} columns={columns} {...args} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: 'By default, the grid cuts the content of a cell and renders an ellipsis if the content of the cell does not fit in the cell. As a workaround, you can create a cell renderer that will allow seeing the full content of the cell in the grid.'\n      }\n    }\n  }\n})",...RenderExpandCellGrid.parameters?.docs?.source}}},RenderHeaderGrid.parameters={...RenderHeaderGrid.parameters,docs:{...RenderHeaderGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const columns: Array<GridColDef> = [{\n    field: 'date',\n    width: 150,\n    type: 'date',\n    renderHeader: () => <strong>\n            {'Birthday '}\n            <span role=\"img\" aria-label=\"enjoy\">\n              🎂\n            </span>\n          </strong>\n  }];\n  const rows = [{\n    id: 1,\n    date: new Date(1979, 0, 1)\n  }, {\n    id: 2,\n    date: new Date(1984, 1, 1)\n  }, {\n    id: 3,\n    date: new Date(1992, 2, 1)\n  }];\n  return <div style={{\n    height: 300,\n    width: '100%'\n  }}>\n        <DataGrid rows={rows} columns={columns} {...args} />\n      </div>;\n}, {\n  parameters: {\n    docs: {\n      description: {\n        story: `You can customize the look of each header with the renderHeader method. It takes precedence over the headerName property.\n\n    const columns: GridColDef[] = [\n      {\n        field: 'date',\n        width: 150,\n        type: 'date',\n        renderHeader: (params: GridColumnHeaderParams) => (\n          <strong>\n            {'Birthday '}\n            <span role=\"img\" aria-label=\"enjoy\">\n              🎂\n            </span>\n          </strong>\n        ),\n      },\n    ];\n\n### Styling header\n\nYou can check the  [styling header](https://mui.com/components/data-grid/style/#styling-column-headers)  section for more information.\n\n### Styling cells\n\nYou can check the  [styling cells](https://mui.com/components/data-grid/style/#styling-cells)  section for more information.`\n      }\n    }\n  }\n})",...RenderHeaderGrid.parameters?.docs?.source}}},ColumnTypesGrid.parameters={...ColumnTypesGrid.parameters,docs:{...ColumnTypesGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const [rows, setRows] = React.useState<Array<Row>>(initialRows);\n  const deleteUser = React.useCallback((id: GridRowId) => () => {\n    setRows(prevRows => prevRows.filter(row => row.id !== id));\n  }, []);\n  const toggleAdmin = React.useCallback((id: GridRowId) => () => {\n    setRows(prevRows => prevRows.map(row => row.id === id ? {\n      ...row,\n      isAdmin: !row.isAdmin\n    } : row));\n  }, []);\n  const duplicateUser = React.useCallback((id: GridRowId) => () => {\n    setRows(prevRows => {\n      const rowToDuplicate = prevRows.find(row => row.id === id)!;\n      const newRows = [...prevRows, {\n        ...rowToDuplicate,\n        id: Date.now()\n      }];\n      return newRows;\n    });\n  }, []);\n  const columns = React.useMemo<Array<GridColDef<Row>>>(() => [{\n    field: 'name',\n    type: 'string'\n  }, {\n    field: 'age',\n    type: 'number'\n  }, {\n    field: 'dateCreated',\n    type: 'date',\n    width: 130\n  }, {\n    field: 'lastLogin',\n    type: 'dateTime',\n    width: 180\n  }, {\n    field: 'isAdmin',\n    type: 'boolean',\n    width: 120\n  }, {\n    field: 'country',\n    type: 'singleSelect',\n    width: 120,\n    valueOptions: ['Bulgaria', 'Netherlands', 'France', 'United Kingdom', 'Spain', 'Brazil']\n  }, {\n    field: 'actions',\n    type: 'actions',\n    width: 80,\n    getActions: (params: GridRowParams) => [<GridActionsCellItem key={'Delete'} icon={<Delete />} label=\"Delete\" onClick={deleteUser(params.id)} />, <GridActionsCellItem key={'Toggle Admin'} icon={<Security />} label=\"Toggle Admin\" onClick={toggleAdmin(params.id)} showInMenu />, <GridActionsCellItem key={'Duplicate User'} icon={<FileCopy />} label=\"Duplicate User\" onClick={duplicateUser(params.id)} showInMenu />]\n  }], [deleteUser, toggleAdmin, duplicateUser]);\n  return <div style={{\n    height: 300,\n    width: '100%'\n  }}>\n      <DataGrid columns={columns} rows={rows} {...args} />\n    </div>;\n})",...ColumnTypesGrid.parameters?.docs?.source}}},CustomColumnTypesGrid.parameters={...CustomColumnTypesGrid.parameters,docs:{...CustomColumnTypesGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const rows = [{\n    id: 1,\n    status: randomStatusOptions(),\n    subTotal: randomPrice(),\n    total: randomPrice()\n  }, {\n    id: 2,\n    status: randomStatusOptions(),\n    subTotal: randomPrice(),\n    total: randomPrice()\n  }, {\n    id: 3,\n    status: randomStatusOptions(),\n    subTotal: randomPrice(),\n    total: randomPrice()\n  }];\n  const classes = useCustomColumnTypesGridStyles();\n  return <div style={{\n    height: 300,\n    width: '100%'\n  }} className={classes.root}>\n      <DataGrid {...args} columns={[{\n      field: 'status',\n      width: 130\n    }, {\n      field: 'subTotal',\n      ...usdPrice\n    }, {\n      field: 'total',\n      ...usdPrice\n    }]} rows={rows} />\n    </div>;\n})",...CustomColumnTypesGrid.parameters?.docs?.source}}},ColumnMenuGrid.parameters={...ColumnMenuGrid.parameters,docs:{...ColumnMenuGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 20,\n    maxColumns: 5\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid {...args} {...data} disableColumnMenu />\n    </div>;\n})",...ColumnMenuGrid.parameters?.docs?.source}}},ColumnSelectorGrid.parameters={...ColumnSelectorGrid.parameters,docs:{...ColumnSelectorGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 10\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid {...args} {...data} slots={{\n      toolbar: GridToolbar\n    }} />\n    </div>;\n})",...ColumnSelectorGrid.parameters?.docs?.source}}},ColumnOrderingGrid.parameters={...ColumnOrderingGrid.parameters,docs:{...ColumnOrderingGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  // const { data } = useDemoData({\n  //   dataSet: 'Commodity',\n  //   rowLength: 20,\n  //   maxColumns: 20,\n  // })\n\n  return <></>\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // <div style={{ height: 400, width: '100%' }}>\n  //   <DataGridPro {...data} />\n  // </div>\n  ;\n})",...ColumnOrderingGrid.parameters?.docs?.source}}},ColumnGroupsGrid.parameters={...ColumnGroupsGrid.parameters,docs:{...ColumnGroupsGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...ColumnGroupsGrid.parameters?.docs?.source}}},ColumnPinningGrid.parameters={...ColumnPinningGrid.parameters,docs:{...ColumnPinningGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...ColumnPinningGrid.parameters?.docs?.source}}},ColumnSpanningGrid.parameters={...ColumnSpanningGrid.parameters,docs:{...ColumnSpanningGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...ColumnSpanningGrid.parameters?.docs?.source}}};const __namedExportsOrder=["Default","HeaderColumnsGrid","ColumnWidthGrid","ColumnMinWidthGrid","ColumnFluidWidthGrid","ColumnSizingGrid","ValueGetterGrid","ValueFormatterGrid","ValueParserGrid","RenderCellGrid","RenderExpandCellGrid","RenderHeaderGrid","ColumnTypesGrid","CustomColumnTypesGrid","ColumnMenuGrid","ColumnSelectorGrid","ColumnOrderingGrid","ColumnGroupsGrid","ColumnPinningGrid","ColumnSpanningGrid"]},"../components/src/Paper/Paper.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Xk:()=>Paper});const Paper=__webpack_require__("../../node_modules/@mui/material/Paper/Paper.js").Z;try{Paper.displayName="Paper",Paper.__docgenInfo={description:"\nDemos:\n\n- [Paper](https://simspace.gitlab.io/engineering/ux-engineering/monorail/main/storybook/?path=/docs/surfaces-paper--default)\n- [Cards (MUI)](https://mui.com/material-ui/react-card/)\n- [Paper (MUI)](https://mui.com/material-ui/react-paper/)\n\nAPI:\n\n- [Paper API](https://mui.com/material-ui/api/paper/)",displayName:"Paper",props:{children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<PaperClasses> & Partial<ClassNameMap<never>>"}},square:{defaultValue:{value:"false"},description:"If `true`, rounded corners are disabled.",name:"square",required:!1,type:{name:"boolean"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Paper/Paper.tsx#Paper"]={docgenInfo:Paper.__docgenInfo,name:"Paper",path:"../components/src/Paper/Paper.tsx#Paper"})}catch(__react_docgen_typescript_loader_error){}try{getPaperUtilityClass.displayName="getPaperUtilityClass",getPaperUtilityClass.__docgenInfo={description:"",displayName:"getPaperUtilityClass",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.",name:"toString",required:!1,type:{name:"() => string"}},charAt:{defaultValue:null,description:"Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",name:"charAt",required:!0,type:{name:"(pos: number) => string"}},charCodeAt:{defaultValue:null,description:"Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",name:"charCodeAt",required:!0,type:{name:"(index: number) => number"}},indexOf:{defaultValue:null,description:"Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",name:"indexOf",required:!0,type:{name:"(searchString: string, position?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",name:"lastIndexOf",required:!0,type:{name:"(searchString: string, position?: number) => number"}},localeCompare:{defaultValue:null,description:"Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",name:"localeCompare",required:!0,type:{name:"{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"}},match:{defaultValue:null,description:"Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",name:"match",required:!0,type:{name:"{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"}},replace:{defaultValue:null,description:"Replaces text in a string, using a regular expression or search string.\nPasses a string and {@linkcode replaceValue} to the `[Symbol.replace]` method on {@linkcode searchValue}. This method is expected to implement its own replacement algorithm.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string or regular expression to search for.\n@param replaceValue A string containing the text to replace. When the {@linkcode searchValue } is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue } is replaced.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue An object that supports searching for and replacing matches within a string.\n@param replaceValue The replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",name:"replace",required:!0,type:{name:"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }"}},search:{defaultValue:null,description:"Finds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",name:"search",required:!0,type:{name:"{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }"}},slice:{defaultValue:null,description:"Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => string"}},split:{defaultValue:null,description:"Split a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",name:"split",required:!0,type:{name:"{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"}},substring:{defaultValue:null,description:"Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned.",name:"substring",required:!0,type:{name:"(start: number, end?: number) => string"}},toLowerCase:{defaultValue:null,description:"Converts all the alphabetic characters in a string to lowercase.",name:"toLowerCase",required:!0,type:{name:"() => string"}},toLocaleLowerCase:{defaultValue:null,description:"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",name:"toLocaleLowerCase",required:!0,type:{name:"(locales?: string | string[]) => string"}},toUpperCase:{defaultValue:null,description:"Converts all the alphabetic characters in a string to uppercase.",name:"toUpperCase",required:!0,type:{name:"() => string"}},toLocaleUpperCase:{defaultValue:null,description:"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",name:"toLocaleUpperCase",required:!0,type:{name:"(locales?: string | string[]) => string"}},trim:{defaultValue:null,description:"Removes the leading and trailing white space and line terminator characters from a string.",name:"trim",required:!0,type:{name:"() => string"}},length:{defaultValue:null,description:"Returns the length of a String object.",name:"length",required:!0,type:{name:"number"}},substr:{defaultValue:null,description:"Gets a substring beginning at the specified location and having the specified length.\n@deprecated A legacy feature for browser compatibility\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",name:"substr",required:!0,type:{name:"(from: number, length?: number) => string"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"() => string"}},codePointAt:{defaultValue:null,description:"Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",name:"codePointAt",required:!0,type:{name:"(pos: number) => number"}},includes:{defaultValue:null,description:"Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",name:"includes",required:!0,type:{name:"(searchString: string, position?: number) => boolean"}},endsWith:{defaultValue:null,description:"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",name:"endsWith",required:!0,type:{name:"(searchString: string, endPosition?: number) => boolean"}},normalize:{defaultValue:null,description:'Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\nis "NFC"\n@param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\nis "NFC"',name:"normalize",required:!0,type:{name:'{ (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string; (form?: string): string; }'}},repeat:{defaultValue:null,description:"Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",name:"repeat",required:!0,type:{name:"(count: number) => string"}},startsWith:{defaultValue:null,description:"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",name:"startsWith",required:!0,type:{name:"(searchString: string, position?: number) => boolean"}},anchor:{defaultValue:null,description:"Returns an `<a>` HTML anchor element and sets the name attribute to the text value\n@deprecated A legacy feature for browser compatibility\n@param name",name:"anchor",required:!0,type:{name:"(name: string) => string"}},big:{defaultValue:null,description:"Returns a `<big>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"big",required:!0,type:{name:"() => string"}},blink:{defaultValue:null,description:"Returns a `<blink>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"blink",required:!0,type:{name:"() => string"}},bold:{defaultValue:null,description:"Returns a `<b>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"bold",required:!0,type:{name:"() => string"}},fixed:{defaultValue:null,description:"Returns a `<tt>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"fixed",required:!0,type:{name:"() => string"}},italics:{defaultValue:null,description:"Returns an `<i>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"italics",required:!0,type:{name:"() => string"}},link:{defaultValue:null,description:"Returns an `<a>` HTML element and sets the href attribute value\n@deprecated A legacy feature for browser compatibility",name:"link",required:!0,type:{name:"(url: string) => string"}},small:{defaultValue:null,description:"Returns a `<small>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"small",required:!0,type:{name:"() => string"}},strike:{defaultValue:null,description:"Returns a `<strike>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"strike",required:!0,type:{name:"() => string"}},sub:{defaultValue:null,description:"Returns a `<sub>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"sub",required:!0,type:{name:"() => string"}},sup:{defaultValue:null,description:"Returns a `<sup>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"sup",required:!0,type:{name:"() => string"}},padStart:{defaultValue:null,description:'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is " " (U+0020).',name:"padStart",required:!0,type:{name:"(maxLength: number, fillString?: string) => string"}},padEnd:{defaultValue:null,description:'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is " " (U+0020).',name:"padEnd",required:!0,type:{name:"(maxLength: number, fillString?: string) => string"}},trimEnd:{defaultValue:null,description:"Removes the trailing white space and line terminator characters from a string.",name:"trimEnd",required:!0,type:{name:"() => string"}},trimStart:{defaultValue:null,description:"Removes the leading white space and line terminator characters from a string.",name:"trimStart",required:!0,type:{name:"() => string"}},trimLeft:{defaultValue:null,description:"Removes the leading white space and line terminator characters from a string.\n@deprecated A legacy feature for browser compatibility. Use `trimStart` instead",name:"trimLeft",required:!0,type:{name:"() => string"}},trimRight:{defaultValue:null,description:"Removes the trailing white space and line terminator characters from a string.\n@deprecated A legacy feature for browser compatibility. Use `trimEnd` instead",name:"trimRight",required:!0,type:{name:"() => string"}},matchAll:{defaultValue:null,description:"Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.",name:"matchAll",required:!0,type:{name:"(regexp: RegExp) => IterableIterator<RegExpMatchArray>"}},replaceAll:{defaultValue:null,description:"Replace all instances of a substring in a string, using a regular expression or search string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.",name:"replaceAll",required:!0,type:{name:"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; }"}},at:{defaultValue:null,description:"Returns a new String consisting of the single UTF-16 code unit located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",name:"at",required:!0,type:{name:"(index: number) => string"}},"__@iterator@84":{defaultValue:null,description:"Iterator",name:"__@iterator@84",required:!0,type:{name:"() => IterableIterator<string>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Paper/Paper.tsx#getPaperUtilityClass"]={docgenInfo:getPaperUtilityClass.__docgenInfo,name:"getPaperUtilityClass",path:"../components/src/Paper/Paper.tsx#getPaperUtilityClass"})}catch(__react_docgen_typescript_loader_error){}},"../components/src/Popper/Popper.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{r:()=>Popper});const Popper=__webpack_require__("../../node_modules/@mui/material/Popper/Popper.js").Z;try{Popper.displayName="Popper",Popper.__docgenInfo={description:"\nDemos:\n\n- [Popper](https://simspace.gitlab.io/engineering/ux-engineering/monorail/main/storybook/?path=/docs/utils-popper--default)\n- [Autocomplete (MUI)](https://mui.com/material-ui/react-autocomplete/)\n- [Menus (MUI)](https://mui.com/material-ui/react-menu/)\n- [Popper (MUI)](https://mui.com/material-ui/react-popper/)\n\nAPI:\n\n- [Popper API](https://mui.com/material-ui/api/popper/)",displayName:"Popper",props:{sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},slot:{defaultValue:null,description:"",name:"slot",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"If `true`, the component is shown.",name:"open",required:!0,type:{name:"boolean"}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Popper render function or node.",name:"children",required:!1,type:{name:"ReactNode | ((props: PopperChildrenProps) => ReactNode)"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},defaultChecked:{defaultValue:null,description:"",name:"defaultChecked",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | number | readonly string[]"}},accessKey:{defaultValue:null,description:"",name:"accessKey",required:!1,type:{name:"string"}},autoCapitalize:{defaultValue:null,description:"",name:"autoCapitalize",required:!1,type:{name:'(string & {}) | "off" | "none" | "on" | "sentences" | "words" | "characters"'}},autoFocus:{defaultValue:null,description:"",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},dir:{defaultValue:null,description:"",name:"dir",required:!1,type:{name:"string"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"Booleanish"}},enterKeyHint:{defaultValue:null,description:"",name:"enterKeyHint",required:!1,type:{name:'"search" | "enter" | "done" | "go" | "next" | "previous" | "send"'}},hidden:{defaultValue:null,description:"",name:"hidden",required:!1,type:{name:"boolean"}},lang:{defaultValue:null,description:"",name:"lang",required:!1,type:{name:"string"}},spellCheck:{defaultValue:null,description:"",name:"spellCheck",required:!1,type:{name:"Booleanish"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},translate:{defaultValue:null,description:"",name:"translate",required:!1,type:{name:'"yes" | "no"'}},radioGroup:{defaultValue:null,description:"",name:"radioGroup",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"",name:"role",required:!1,type:{name:"AriaRole"}},about:{defaultValue:null,description:"",name:"about",required:!1,type:{name:"string"}},datatype:{defaultValue:null,description:"",name:"datatype",required:!1,type:{name:"string"}},inlist:{defaultValue:null,description:"",name:"inlist",required:!1,type:{name:"any"}},prefix:{defaultValue:null,description:"",name:"prefix",required:!1,type:{name:"string"}},property:{defaultValue:null,description:"",name:"property",required:!1,type:{name:"string"}},rel:{defaultValue:null,description:"",name:"rel",required:!1,type:{name:"string"}},resource:{defaultValue:null,description:"",name:"resource",required:!1,type:{name:"string"}},rev:{defaultValue:null,description:"",name:"rev",required:!1,type:{name:"string"}},typeof:{defaultValue:null,description:"",name:"typeof",required:!1,type:{name:"string"}},vocab:{defaultValue:null,description:"",name:"vocab",required:!1,type:{name:"string"}},autoCorrect:{defaultValue:null,description:"",name:"autoCorrect",required:!1,type:{name:"string"}},autoSave:{defaultValue:null,description:"",name:"autoSave",required:!1,type:{name:"string"}},itemProp:{defaultValue:null,description:"",name:"itemProp",required:!1,type:{name:"string"}},itemScope:{defaultValue:null,description:"",name:"itemScope",required:!1,type:{name:"boolean"}},itemType:{defaultValue:null,description:"",name:"itemType",required:!1,type:{name:"string"}},itemID:{defaultValue:null,description:"",name:"itemID",required:!1,type:{name:"string"}},itemRef:{defaultValue:null,description:"",name:"itemRef",required:!1,type:{name:"string"}},results:{defaultValue:null,description:"",name:"results",required:!1,type:{name:"number"}},security:{defaultValue:null,description:"",name:"security",required:!1,type:{name:"string"}},unselectable:{defaultValue:null,description:"",name:"unselectable",required:!1,type:{name:'"off" | "on"'}},inputMode:{defaultValue:null,description:"Hints at the type of data that might be entered by the user while editing the element or its contents\n@see {@link https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute}",name:"inputMode",required:!1,type:{name:'"search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal"'}},is:{defaultValue:null,description:"Specify that a standard HTML element should behave like a defined custom built-in element\n@see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is}",name:"is",required:!1,type:{name:"string"}},dangerouslySetInnerHTML:{defaultValue:null,description:"",name:"dangerouslySetInnerHTML",required:!1,type:{name:"{ __html: string | TrustedHTML; }"}},ref:{defaultValue:null,description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",name:"ref",required:!1,type:{name:"Ref<HTMLDivElement> & LegacyRef<HTMLDivElement>"}},key:{defaultValue:null,description:"",name:"key",required:!1,type:{name:"Key"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside the Popper.",name:"slotProps",required:!1,type:{name:'{ root?: SlotComponentProps<"div", PopperRootSlotPropsOverrides, PopperOwnProps>; }'}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside the Popper.\nEither a string to use a HTML element or a component.",name:"slots",required:!1,type:{name:"PopperSlots"}},disablePortal:{defaultValue:{value:"false"},description:"The `children` will be under the DOM hierarchy of the parent component.",name:"disablePortal",required:!1,type:{name:"boolean"}},keepMounted:{defaultValue:{value:"false"},description:"Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Popper.",name:"keepMounted",required:!1,type:{name:"boolean"}},anchorEl:{defaultValue:null,description:"An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\nor a function that returns either.\nIt's used to set the position of the popper.\nThe return value will passed as the reference object of the Popper instance.",name:"anchorEl",required:!1,type:{name:"HTMLElement | VirtualElement | (() => HTMLElement) | (() => VirtualElement)"}},placement:{defaultValue:{value:"'bottom'"},description:"Popper placement.",name:"placement",required:!1,type:{name:"Placement"}},modifiers:{defaultValue:null,description:'Popper.js is based on a "plugin-like" architecture,\nmost of its features are fully encapsulated "modifiers".\n\nA modifier is a function that is called each time Popper.js needs to\ncompute the position of the popper.\nFor this reason, modifiers should be very performant to avoid bottlenecks.\nTo learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).',name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[]"}},popperRef:{defaultValue:null,description:"A ref that points to the used popper instance.",name:"popperRef",required:!1,type:{name:"Ref<Instance>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Popper/Popper.tsx#Popper"]={docgenInfo:Popper.__docgenInfo,name:"Popper",path:"../components/src/Popper/Popper.tsx#Popper"})}catch(__react_docgen_typescript_loader_error){}try{getPopperUtilityClass.displayName="getPopperUtilityClass",getPopperUtilityClass.__docgenInfo={description:"",displayName:"getPopperUtilityClass",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.",name:"toString",required:!1,type:{name:"() => string"}},charAt:{defaultValue:null,description:"Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",name:"charAt",required:!0,type:{name:"(pos: number) => string"}},charCodeAt:{defaultValue:null,description:"Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",name:"charCodeAt",required:!0,type:{name:"(index: number) => number"}},indexOf:{defaultValue:null,description:"Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",name:"indexOf",required:!0,type:{name:"(searchString: string, position?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",name:"lastIndexOf",required:!0,type:{name:"(searchString: string, position?: number) => number"}},localeCompare:{defaultValue:null,description:"Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",name:"localeCompare",required:!0,type:{name:"{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"}},match:{defaultValue:null,description:"Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",name:"match",required:!0,type:{name:"{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"}},replace:{defaultValue:null,description:"Replaces text in a string, using a regular expression or search string.\nPasses a string and {@linkcode replaceValue} to the `[Symbol.replace]` method on {@linkcode searchValue}. This method is expected to implement its own replacement algorithm.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string or regular expression to search for.\n@param replaceValue A string containing the text to replace. When the {@linkcode searchValue } is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue } is replaced.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue An object that supports searching for and replacing matches within a string.\n@param replaceValue The replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",name:"replace",required:!0,type:{name:"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }"}},search:{defaultValue:null,description:"Finds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",name:"search",required:!0,type:{name:"{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }"}},slice:{defaultValue:null,description:"Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => string"}},split:{defaultValue:null,description:"Split a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",name:"split",required:!0,type:{name:"{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"}},substring:{defaultValue:null,description:"Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned.",name:"substring",required:!0,type:{name:"(start: number, end?: number) => string"}},toLowerCase:{defaultValue:null,description:"Converts all the alphabetic characters in a string to lowercase.",name:"toLowerCase",required:!0,type:{name:"() => string"}},toLocaleLowerCase:{defaultValue:null,description:"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",name:"toLocaleLowerCase",required:!0,type:{name:"(locales?: string | string[]) => string"}},toUpperCase:{defaultValue:null,description:"Converts all the alphabetic characters in a string to uppercase.",name:"toUpperCase",required:!0,type:{name:"() => string"}},toLocaleUpperCase:{defaultValue:null,description:"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",name:"toLocaleUpperCase",required:!0,type:{name:"(locales?: string | string[]) => string"}},trim:{defaultValue:null,description:"Removes the leading and trailing white space and line terminator characters from a string.",name:"trim",required:!0,type:{name:"() => string"}},length:{defaultValue:null,description:"Returns the length of a String object.",name:"length",required:!0,type:{name:"number"}},substr:{defaultValue:null,description:"Gets a substring beginning at the specified location and having the specified length.\n@deprecated A legacy feature for browser compatibility\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",name:"substr",required:!0,type:{name:"(from: number, length?: number) => string"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"() => string"}},codePointAt:{defaultValue:null,description:"Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",name:"codePointAt",required:!0,type:{name:"(pos: number) => number"}},includes:{defaultValue:null,description:"Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",name:"includes",required:!0,type:{name:"(searchString: string, position?: number) => boolean"}},endsWith:{defaultValue:null,description:"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",name:"endsWith",required:!0,type:{name:"(searchString: string, endPosition?: number) => boolean"}},normalize:{defaultValue:null,description:'Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\nis "NFC"\n@param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\nis "NFC"',name:"normalize",required:!0,type:{name:'{ (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string; (form?: string): string; }'}},repeat:{defaultValue:null,description:"Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",name:"repeat",required:!0,type:{name:"(count: number) => string"}},startsWith:{defaultValue:null,description:"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",name:"startsWith",required:!0,type:{name:"(searchString: string, position?: number) => boolean"}},anchor:{defaultValue:null,description:"Returns an `<a>` HTML anchor element and sets the name attribute to the text value\n@deprecated A legacy feature for browser compatibility\n@param name",name:"anchor",required:!0,type:{name:"(name: string) => string"}},big:{defaultValue:null,description:"Returns a `<big>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"big",required:!0,type:{name:"() => string"}},blink:{defaultValue:null,description:"Returns a `<blink>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"blink",required:!0,type:{name:"() => string"}},bold:{defaultValue:null,description:"Returns a `<b>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"bold",required:!0,type:{name:"() => string"}},fixed:{defaultValue:null,description:"Returns a `<tt>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"fixed",required:!0,type:{name:"() => string"}},italics:{defaultValue:null,description:"Returns an `<i>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"italics",required:!0,type:{name:"() => string"}},link:{defaultValue:null,description:"Returns an `<a>` HTML element and sets the href attribute value\n@deprecated A legacy feature for browser compatibility",name:"link",required:!0,type:{name:"(url: string) => string"}},small:{defaultValue:null,description:"Returns a `<small>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"small",required:!0,type:{name:"() => string"}},strike:{defaultValue:null,description:"Returns a `<strike>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"strike",required:!0,type:{name:"() => string"}},sub:{defaultValue:null,description:"Returns a `<sub>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"sub",required:!0,type:{name:"() => string"}},sup:{defaultValue:null,description:"Returns a `<sup>` HTML element\n@deprecated A legacy feature for browser compatibility",name:"sup",required:!0,type:{name:"() => string"}},padStart:{defaultValue:null,description:'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is " " (U+0020).',name:"padStart",required:!0,type:{name:"(maxLength: number, fillString?: string) => string"}},padEnd:{defaultValue:null,description:'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is " " (U+0020).',name:"padEnd",required:!0,type:{name:"(maxLength: number, fillString?: string) => string"}},trimEnd:{defaultValue:null,description:"Removes the trailing white space and line terminator characters from a string.",name:"trimEnd",required:!0,type:{name:"() => string"}},trimStart:{defaultValue:null,description:"Removes the leading white space and line terminator characters from a string.",name:"trimStart",required:!0,type:{name:"() => string"}},trimLeft:{defaultValue:null,description:"Removes the leading white space and line terminator characters from a string.\n@deprecated A legacy feature for browser compatibility. Use `trimStart` instead",name:"trimLeft",required:!0,type:{name:"() => string"}},trimRight:{defaultValue:null,description:"Removes the trailing white space and line terminator characters from a string.\n@deprecated A legacy feature for browser compatibility. Use `trimEnd` instead",name:"trimRight",required:!0,type:{name:"() => string"}},matchAll:{defaultValue:null,description:"Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.",name:"matchAll",required:!0,type:{name:"(regexp: RegExp) => IterableIterator<RegExpMatchArray>"}},replaceAll:{defaultValue:null,description:"Replace all instances of a substring in a string, using a regular expression or search string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.",name:"replaceAll",required:!0,type:{name:"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; }"}},at:{defaultValue:null,description:"Returns a new String consisting of the single UTF-16 code unit located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",name:"at",required:!0,type:{name:"(index: number) => string"}},"__@iterator@84":{defaultValue:null,description:"Iterator",name:"__@iterator@84",required:!0,type:{name:"() => IterableIterator<string>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Popper/Popper.tsx#getPopperUtilityClass"]={docgenInfo:getPopperUtilityClass.__docgenInfo,name:"getPopperUtilityClass",path:"../components/src/Popper/Popper.tsx#getPopperUtilityClass"})}catch(__react_docgen_typescript_loader_error){}}}]);