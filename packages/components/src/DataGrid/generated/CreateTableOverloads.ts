/* eslint-disable */
import type { GridValidRowModel } from "../internal";
import type { MakeTypedColDef } from "../models/makeTypedColDef";
import type { GridColFilterType } from "../models/gridColFilterType";
import type { TableDef } from "../models/tableDef";

export interface CreateTableOverloads<R extends GridValidRowModel> {
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>): TableDef<[typeof d0, ]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>): TableDef<[typeof d0, typeof d1]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>): TableDef<[typeof d0, typeof d1, typeof d2]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType, K13 extends string = any, V13 = K13 extends keyof R ? R[K13] : any, VG13 = never, F13 = V13, Filter13 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>, d13: MakeTypedColDef<R, K13, V13, VG13, F13, Filter13>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12, typeof d13]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType, K13 extends string = any, V13 = K13 extends keyof R ? R[K13] : any, VG13 = never, F13 = V13, Filter13 extends GridColFilterType = GridColFilterType, K14 extends string = any, V14 = K14 extends keyof R ? R[K14] : any, VG14 = never, F14 = V14, Filter14 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>, d13: MakeTypedColDef<R, K13, V13, VG13, F13, Filter13>, d14: MakeTypedColDef<R, K14, V14, VG14, F14, Filter14>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12, typeof d13, typeof d14]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType, K13 extends string = any, V13 = K13 extends keyof R ? R[K13] : any, VG13 = never, F13 = V13, Filter13 extends GridColFilterType = GridColFilterType, K14 extends string = any, V14 = K14 extends keyof R ? R[K14] : any, VG14 = never, F14 = V14, Filter14 extends GridColFilterType = GridColFilterType, K15 extends string = any, V15 = K15 extends keyof R ? R[K15] : any, VG15 = never, F15 = V15, Filter15 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>, d13: MakeTypedColDef<R, K13, V13, VG13, F13, Filter13>, d14: MakeTypedColDef<R, K14, V14, VG14, F14, Filter14>, d15: MakeTypedColDef<R, K15, V15, VG15, F15, Filter15>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12, typeof d13, typeof d14, typeof d15]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType, K13 extends string = any, V13 = K13 extends keyof R ? R[K13] : any, VG13 = never, F13 = V13, Filter13 extends GridColFilterType = GridColFilterType, K14 extends string = any, V14 = K14 extends keyof R ? R[K14] : any, VG14 = never, F14 = V14, Filter14 extends GridColFilterType = GridColFilterType, K15 extends string = any, V15 = K15 extends keyof R ? R[K15] : any, VG15 = never, F15 = V15, Filter15 extends GridColFilterType = GridColFilterType, K16 extends string = any, V16 = K16 extends keyof R ? R[K16] : any, VG16 = never, F16 = V16, Filter16 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>, d13: MakeTypedColDef<R, K13, V13, VG13, F13, Filter13>, d14: MakeTypedColDef<R, K14, V14, VG14, F14, Filter14>, d15: MakeTypedColDef<R, K15, V15, VG15, F15, Filter15>, d16: MakeTypedColDef<R, K16, V16, VG16, F16, Filter16>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12, typeof d13, typeof d14, typeof d15, typeof d16]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType, K13 extends string = any, V13 = K13 extends keyof R ? R[K13] : any, VG13 = never, F13 = V13, Filter13 extends GridColFilterType = GridColFilterType, K14 extends string = any, V14 = K14 extends keyof R ? R[K14] : any, VG14 = never, F14 = V14, Filter14 extends GridColFilterType = GridColFilterType, K15 extends string = any, V15 = K15 extends keyof R ? R[K15] : any, VG15 = never, F15 = V15, Filter15 extends GridColFilterType = GridColFilterType, K16 extends string = any, V16 = K16 extends keyof R ? R[K16] : any, VG16 = never, F16 = V16, Filter16 extends GridColFilterType = GridColFilterType, K17 extends string = any, V17 = K17 extends keyof R ? R[K17] : any, VG17 = never, F17 = V17, Filter17 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>, d13: MakeTypedColDef<R, K13, V13, VG13, F13, Filter13>, d14: MakeTypedColDef<R, K14, V14, VG14, F14, Filter14>, d15: MakeTypedColDef<R, K15, V15, VG15, F15, Filter15>, d16: MakeTypedColDef<R, K16, V16, VG16, F16, Filter16>, d17: MakeTypedColDef<R, K17, V17, VG17, F17, Filter17>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12, typeof d13, typeof d14, typeof d15, typeof d16, typeof d17]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType, K13 extends string = any, V13 = K13 extends keyof R ? R[K13] : any, VG13 = never, F13 = V13, Filter13 extends GridColFilterType = GridColFilterType, K14 extends string = any, V14 = K14 extends keyof R ? R[K14] : any, VG14 = never, F14 = V14, Filter14 extends GridColFilterType = GridColFilterType, K15 extends string = any, V15 = K15 extends keyof R ? R[K15] : any, VG15 = never, F15 = V15, Filter15 extends GridColFilterType = GridColFilterType, K16 extends string = any, V16 = K16 extends keyof R ? R[K16] : any, VG16 = never, F16 = V16, Filter16 extends GridColFilterType = GridColFilterType, K17 extends string = any, V17 = K17 extends keyof R ? R[K17] : any, VG17 = never, F17 = V17, Filter17 extends GridColFilterType = GridColFilterType, K18 extends string = any, V18 = K18 extends keyof R ? R[K18] : any, VG18 = never, F18 = V18, Filter18 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>, d13: MakeTypedColDef<R, K13, V13, VG13, F13, Filter13>, d14: MakeTypedColDef<R, K14, V14, VG14, F14, Filter14>, d15: MakeTypedColDef<R, K15, V15, VG15, F15, Filter15>, d16: MakeTypedColDef<R, K16, V16, VG16, F16, Filter16>, d17: MakeTypedColDef<R, K17, V17, VG17, F17, Filter17>, d18: MakeTypedColDef<R, K18, V18, VG18, F18, Filter18>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12, typeof d13, typeof d14, typeof d15, typeof d16, typeof d17, typeof d18]>;
    <K0 extends string = any, V0 = K0 extends keyof R ? R[K0] : any, VG0 = never, F0 = V0, Filter0 extends GridColFilterType = GridColFilterType, K1 extends string = any, V1 = K1 extends keyof R ? R[K1] : any, VG1 = never, F1 = V1, Filter1 extends GridColFilterType = GridColFilterType, K2 extends string = any, V2 = K2 extends keyof R ? R[K2] : any, VG2 = never, F2 = V2, Filter2 extends GridColFilterType = GridColFilterType, K3 extends string = any, V3 = K3 extends keyof R ? R[K3] : any, VG3 = never, F3 = V3, Filter3 extends GridColFilterType = GridColFilterType, K4 extends string = any, V4 = K4 extends keyof R ? R[K4] : any, VG4 = never, F4 = V4, Filter4 extends GridColFilterType = GridColFilterType, K5 extends string = any, V5 = K5 extends keyof R ? R[K5] : any, VG5 = never, F5 = V5, Filter5 extends GridColFilterType = GridColFilterType, K6 extends string = any, V6 = K6 extends keyof R ? R[K6] : any, VG6 = never, F6 = V6, Filter6 extends GridColFilterType = GridColFilterType, K7 extends string = any, V7 = K7 extends keyof R ? R[K7] : any, VG7 = never, F7 = V7, Filter7 extends GridColFilterType = GridColFilterType, K8 extends string = any, V8 = K8 extends keyof R ? R[K8] : any, VG8 = never, F8 = V8, Filter8 extends GridColFilterType = GridColFilterType, K9 extends string = any, V9 = K9 extends keyof R ? R[K9] : any, VG9 = never, F9 = V9, Filter9 extends GridColFilterType = GridColFilterType, K10 extends string = any, V10 = K10 extends keyof R ? R[K10] : any, VG10 = never, F10 = V10, Filter10 extends GridColFilterType = GridColFilterType, K11 extends string = any, V11 = K11 extends keyof R ? R[K11] : any, VG11 = never, F11 = V11, Filter11 extends GridColFilterType = GridColFilterType, K12 extends string = any, V12 = K12 extends keyof R ? R[K12] : any, VG12 = never, F12 = V12, Filter12 extends GridColFilterType = GridColFilterType, K13 extends string = any, V13 = K13 extends keyof R ? R[K13] : any, VG13 = never, F13 = V13, Filter13 extends GridColFilterType = GridColFilterType, K14 extends string = any, V14 = K14 extends keyof R ? R[K14] : any, VG14 = never, F14 = V14, Filter14 extends GridColFilterType = GridColFilterType, K15 extends string = any, V15 = K15 extends keyof R ? R[K15] : any, VG15 = never, F15 = V15, Filter15 extends GridColFilterType = GridColFilterType, K16 extends string = any, V16 = K16 extends keyof R ? R[K16] : any, VG16 = never, F16 = V16, Filter16 extends GridColFilterType = GridColFilterType, K17 extends string = any, V17 = K17 extends keyof R ? R[K17] : any, VG17 = never, F17 = V17, Filter17 extends GridColFilterType = GridColFilterType, K18 extends string = any, V18 = K18 extends keyof R ? R[K18] : any, VG18 = never, F18 = V18, Filter18 extends GridColFilterType = GridColFilterType, K19 extends string = any, V19 = K19 extends keyof R ? R[K19] : any, VG19 = never, F19 = V19, Filter19 extends GridColFilterType = GridColFilterType>(d0: MakeTypedColDef<R, K0, V0, VG0, F0, Filter0>, d1: MakeTypedColDef<R, K1, V1, VG1, F1, Filter1>, d2: MakeTypedColDef<R, K2, V2, VG2, F2, Filter2>, d3: MakeTypedColDef<R, K3, V3, VG3, F3, Filter3>, d4: MakeTypedColDef<R, K4, V4, VG4, F4, Filter4>, d5: MakeTypedColDef<R, K5, V5, VG5, F5, Filter5>, d6: MakeTypedColDef<R, K6, V6, VG6, F6, Filter6>, d7: MakeTypedColDef<R, K7, V7, VG7, F7, Filter7>, d8: MakeTypedColDef<R, K8, V8, VG8, F8, Filter8>, d9: MakeTypedColDef<R, K9, V9, VG9, F9, Filter9>, d10: MakeTypedColDef<R, K10, V10, VG10, F10, Filter10>, d11: MakeTypedColDef<R, K11, V11, VG11, F11, Filter11>, d12: MakeTypedColDef<R, K12, V12, VG12, F12, Filter12>, d13: MakeTypedColDef<R, K13, V13, VG13, F13, Filter13>, d14: MakeTypedColDef<R, K14, V14, VG14, F14, Filter14>, d15: MakeTypedColDef<R, K15, V15, VG15, F15, Filter15>, d16: MakeTypedColDef<R, K16, V16, VG16, F16, Filter16>, d17: MakeTypedColDef<R, K17, V17, VG17, F17, Filter17>, d18: MakeTypedColDef<R, K18, V18, VG18, F18, Filter18>, d19: MakeTypedColDef<R, K19, V19, VG19, F19, Filter19>): TableDef<[typeof d0, typeof d1, typeof d2, typeof d3, typeof d4, typeof d5, typeof d6, typeof d7, typeof d8, typeof d9, typeof d10, typeof d11, typeof d12, typeof d13, typeof d14, typeof d15, typeof d16, typeof d17, typeof d18, typeof d19]>;
}
