// Edit this file to add new stories
import React from 'react'
import { useDemoData } from '@mui/x-data-grid-generator'

import type { DataGridProps } from '@monorail/components'
import {
  createTable,
  DataGrid,
  dataGridClasses,
  GridActionsCellItem,
  MenuItem,
  Typography,
  useGridApiRef,
} from '@monorail/components'
import * as Icons from '@monorail/components/icons'

import { story } from '../helpers/storybook.js'

export default { title: 'Data Grid/Layout', component: DataGrid }

interface FilterStoryRow {
  id: number
  firstName: string
  lastName: string
  occupation: string
  hireDate: Date
}

const Template = story<DataGridProps>(args => {
  const { data } = useDemoData({
    dataSet: 'Commodity',
    rowLength: 5,
    maxColumns: 6,
  })

  return (
    <div style={{ height: 400, width: '100%' }}>
      <div style={{ display: 'flex', height: '100%' }}>
        <div style={{ flexGrow: 1 }}>
          <DataGrid {...data} {...args} />
        </div>
      </div>
    </div>
  )
})

export const Default = story(Template)
Default.parameters = {
  docs: {
    description: {
      component: `The data grid offers multiple layout mode.

By default, the grid has no intrinsic dimensions. It occupies the space its parent leaves.

> ⚠️ When using % (**percentage**) for your height or width. You need to make sure the container you are putting the grid into also has an intrinsic dimension. The browsers fit the element according to a percentage of the parent dimension. If the parent has no dimensions, then the % will be zero.

### Flex layout

It's recommended to use a flex container to render the grid. This allows a flexible layout, resizes well, and works on all devices.`,
    },
  },
  creevey: {
    skip: 'Mismatch expected because data gets regenerated by mui/x-data-grid-generator.',
  },
}

export const FixedSizeGrid = story<DataGridProps>(args => {
  const { data } = useDemoData({
    dataSet: 'Commodity',
    rowLength: 5,
    maxColumns: 6,
  })

  return (
    <div style={{ height: 400, width: '100%' }}>
      <div style={{ height: 350, width: '100%' }}>
        <DataGrid {...args} {...data} />
      </div>
    </div>
  )
})
FixedSizeGrid.storyName = 'Predefined dimensions'
FixedSizeGrid.parameters = {
  docs: {
    description: {
      story: `You can predefine dimensions for the parent of the grid.`,
    },
  },
  creevey: {
    skip: 'Mismatch expected because data gets regenerated by mui/x-data-grid-generator.',
  },
}

export const AutoHeightGrid = story<DataGridProps>(args => {
  const { data } = useDemoData({
    dataSet: 'Commodity',
    rowLength: 4,
    maxColumns: 6,
  })

  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid autoHeight {...args} {...data} />
      <p>more content</p>
    </div>
  )
})
AutoHeightGrid.storyName = 'Auto height'
AutoHeightGrid.parameters = {
  docs: {
    description: {
      story: `The  \`autoHeight\`  prop allows the grid to size according to its content. This means that the number of rows will drive the height of the grid and consequently, they will all be rendered and visible to the user at the same time.

> ⚠️ This is not recommended for large datasets as row virtualization will not be able to improve performance by limiting the number of elements rendered in the DOM.`,
    },
  },
  creevey: {
    skip: 'Mismatch expected because data gets regenerated by mui/x-data-grid-generator.',
  },
}

export const ColumnAlignment = story<DataGridProps<{}>>(
  () => {
    const apiRef = useGridApiRef()

    const { columns } = createTable<FilterStoryRow>()(
      {
        field: 'id',
        headerName: 'ID',
        filter: { type: 'numeric' },
        minWidth: 80,
        headerClassName: 'firstColumn-header',
        cellClassName: 'firstColumn-cell',
      },
      {
        field: 'firstName',
        headerName: 'First name',
        minWidth: 150,
        renderHeader: ({ colDef }) => (
          <React.Fragment>
            <Icons.Person />
            <Typography variant="body2">{colDef.headerName}</Typography>
          </React.Fragment>
        ),
      },
      {
        field: 'lastName',
        headerName: 'Last name',
        minWidth: 150,
        headerActions: ({ closeMenu }) => [
          <MenuItem
            key="lastName-action1"
            onClick={() => {
              closeMenu()
            }}
          >
            Action 1
          </MenuItem>,
          <MenuItem key="lastName-action2">Action 2</MenuItem>,
          <MenuItem key="lastName-action3">Action 3</MenuItem>,
        ],
      },
      {
        field: 'occupation',
        headerName: 'Occupation',
        type: 'string',
        minWidth: 110,
        filter: {
          type: 'enum',
          values: [
            'barista',
            'lifeguard',
            'waiter',
            'engineer',
            'designer',
            'doctor',
            'nurse',
            'other',
            'some really really long item that overflows the container',
          ],
        },
      },
      {
        field: 'hireDate',
        headerName: 'Hire Date',
        type: 'date',
        minWidth: 110,
        filter: {
          type: 'date',
        },
      },
      {
        field: 'fullName',
        headerName: 'Full name',
        description: 'This column has a value getter and is not sortable.',
        sortable: false,
        minWidth: 160,
        valueGetter: params => `${params.row.firstName} ${params.row.lastName}`,
        filter: {
          type: 'text',
        },
      },
      {
        type: 'actions',
        field: 'actions',
        maxWidth: 48,
        getActions: () => [
          <GridActionsCellItem
            key={0}
            showInMenu={false}
            icon={<Icons.MoreVert />}
            label="Action"
          />,
        ],
      },
    )

    const rows: Array<FilterStoryRow> = [
      {
        id: 1,
        lastName: 'Snow',
        firstName: 'Jon',
        occupation: 'barista',
        hireDate: getRandomDate(),
      },
      {
        id: 2,
        lastName: 'Lannister',
        firstName: 'Cersei',
        occupation: 'barista',
        hireDate: getRandomDate(),
      },
      {
        id: 3,
        lastName: 'Lannister',
        firstName: 'Jaime',
        occupation: 'lifeguard',
        hireDate: getRandomDate(),
      },
      {
        id: 4,
        lastName: 'Stark',
        firstName: 'Arya',
        occupation: 'waiter',
        hireDate: getRandomDate(),
      },
      {
        id: 5,
        lastName: 'Targaryen',
        firstName: 'Daenerys',
        occupation: 'lifeguard',
        hireDate: getRandomDate(),
      },
      {
        id: 6,
        lastName: 'Melisandre',
        firstName: 'David',
        occupation: 'barista',
        hireDate: getRandomDate(),
      },
      {
        id: 7,
        lastName: 'Clifford',
        firstName: 'Ferrara',
        occupation: 'waiter',
        hireDate: getRandomDate(),
      },
      {
        id: 8,
        lastName: 'Frances',
        firstName: 'Rossini',
        occupation: 'waiter',
        hireDate: getRandomDate(),
      },
      {
        id: 9,
        lastName: 'Roxie',
        firstName: 'Harvey',
        occupation: 'lifeguard',
        hireDate: getRandomDate(),
      },
      {
        id: 10,
        lastName: 'Smith',
        firstName: 'John',
        occupation: 'designer',
        hireDate: getRandomDate(),
      },
      {
        id: 11,
        lastName: 'Doe',
        firstName: 'Jane',
        occupation: 'engineer',
        hireDate: getRandomDate(),
      },
    ]

    return (
      <div style={{ height: 600, width: '100%' }}>
        <DataGrid
          apiRef={apiRef}
          columns={columns}
          rows={rows}
          sx={{
            '& .firstColumn-header': {
              pl: 6,
            },
            '& .firstColumn-cell': {
              pl: 8,
            },
            [`& .${dataGridClasses.selectedRowCount}`]: {
              ml: 2,
            },
          }}
        />
      </div>
    )
  },
  {
    parameters: {
      docs: {
        description: {
          story: `MUI provides a set of props to apply custom \`className\`s to headers, cells, and rows:

- [headerClassName](https://mui.com/x/react-data-grid/style/#styling-column-headers)
- [getRowClassName](https://mui.com/x/react-data-grid/style/#styling-rows)
- [cellClassName](https://mui.com/x/react-data-grid/style/#styling-rows)`,
        },
      },
    },
  },
)

function getRandomDate(): Date {
  return new Date(new Date().getTime() - Math.random() * 1e12)
}
