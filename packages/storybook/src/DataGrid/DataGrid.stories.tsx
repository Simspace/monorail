// Edit this file to add new stories
import React from 'react'
import { Person } from '@mui/icons-material'

import type { DataGridProps, GridValueGetterParams } from '@monorail/components'
import {
  createTable,
  DataGrid,
  DataGridToolbar,
  MenuItem,
  Typography,
  useGridApiRef,
} from '@monorail/components'

import { story } from '../helpers/storybook.js'

export default {
  title: 'Data Grid/DataGrid',
  component: DataGrid,
  parameters: {
    creevey: {
      skip: 'Mismatch expected because data gets regenerated by mui/x-data-grid-generator.',
    },
  },
}

const columns: DataGridProps['columns'] = [
  { field: 'id', headerName: 'ID' },
  {
    field: 'firstName',
    headerName: 'First name',
    minWidth: 150,
    editable: true,
    renderHeader: ({ colDef }) => (
      <React.Fragment>
        <Person />
        <Typography variant="body2">{colDef.headerName}</Typography>
      </React.Fragment>
    ),
  },
  {
    field: 'lastName',
    headerName: 'Last name',
    minWidth: 150,
    editable: true,
    headerActions: ({ closeMenu }) => [
      <MenuItem
        key="lastName-action1"
        onClick={() => {
          closeMenu()
        }}
      >
        Action 1
      </MenuItem>,
      <MenuItem key="lastName-action2">Action 2</MenuItem>,
      <MenuItem key="lastName-action3">Action 3</MenuItem>,
    ],
  },
  {
    field: 'age',
    headerName: 'Age',
    type: 'number',
    minWidth: 110,
    editable: true,
  },
  {
    field: 'fullName',
    headerName: 'Full name',
    description: 'This column has a value getter and is not sortable.',
    sortable: false,
    minWidth: 160,
    valueGetter: (params: GridValueGetterParams) =>
      `${params.getValue(params.id, 'firstName') ?? ''} ${
        params.getValue(params.id, 'lastName') ?? ''
      }`,
  },
]

const Template = story<DataGridProps>(args => {
  const apiRef = useGridApiRef()
  const rows = [
    { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },
    { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },
    { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },
    { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },
    { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },
    { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },
    { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },
    { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },
    { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },
  ]
  return (
    <div style={{ height: 600, width: '100%' }}>
      <DataGridToolbar apiRef={apiRef} />
      <DataGrid
        apiRef={apiRef}
        columns={columns}
        rows={rows}
        checkboxSelection
        disableSelectionOnClick
        {...args}
      />
    </div>
  )
})

export const Default = story(Template)

interface FilterStoryRow {
  id: number
  firstName: string
  lastName: string
  occupation: string
  hireDate: Date
}

const filterStoryColumns = createTable<FilterStoryRow>()(
  {
    field: 'id',
    headerName: 'ID',
    filter: { type: 'numeric' },
  },
  {
    field: 'firstName',
    headerName: 'First name',
    minWidth: 150,
    renderHeader: ({ colDef }) => (
      <React.Fragment>
        <Person />
        <Typography variant="body2">{colDef.headerName}</Typography>
      </React.Fragment>
    ),
  },
  {
    field: 'lastName',
    headerName: 'Last name',
    minWidth: 150,
    headerActions: ({ closeMenu }) => [
      <MenuItem
        key="lastName-action1"
        onClick={() => {
          closeMenu()
        }}
      >
        Action 1
      </MenuItem>,
      <MenuItem key="lastName-action2">Action 2</MenuItem>,
      <MenuItem key="lastName-action3">Action 3</MenuItem>,
    ],
  },
  {
    field: 'occupation',
    headerName: 'Occupation',
    type: 'string',
    minWidth: 110,
    filter: {
      type: 'enum',
      values: [
        'barista',
        'lifeguard',
        'waiter',
        'engineer',
        'designer',
        'doctor',
        'nurse',
        'other',
        'some really really long item that overflows the container',
      ],
    },
  },
  {
    field: 'hireDate',
    headerName: 'Hire Date',
    type: 'date',
    minWidth: 110,
    filter: {
      type: 'date',
    },
  },
  {
    field: 'fullName',
    headerName: 'Full name',
    description: 'This column has a value getter and is not sortable.',
    sortable: false,
    minWidth: 160,
    valueGetter: (params: GridValueGetterParams) =>
      `${params.getValue(params.id, 'firstName') ?? ''} ${
        params.getValue(params.id, 'lastName') ?? ''
      }`,
    filter: {
      type: 'text',
    },
  },
)

export const Filters = story(() => {
  const apiRef = useGridApiRef()
  const rows: Array<FilterStoryRow> = [
    {
      id: 1,
      lastName: 'Snow',
      firstName: 'Jon',
      occupation: 'barista',
      hireDate: getRandomDate(),
    },
    {
      id: 2,
      lastName: 'Lannister',
      firstName: 'Cersei',
      occupation: 'barista',
      hireDate: getRandomDate(),
    },
    {
      id: 3,
      lastName: 'Lannister',
      firstName: 'Jaime',
      occupation: 'lifeguard',
      hireDate: getRandomDate(),
    },
    {
      id: 4,
      lastName: 'Stark',
      firstName: 'Arya',
      occupation: 'waiter',
      hireDate: getRandomDate(),
    },
    {
      id: 5,
      lastName: 'Targaryen',
      firstName: 'Daenerys',
      occupation: 'lifeguard',
      hireDate: getRandomDate(),
    },
    {
      id: 6,
      lastName: 'Melisandre',
      firstName: 'David',
      occupation: 'barista',
      hireDate: getRandomDate(),
    },
    {
      id: 7,
      lastName: 'Clifford',
      firstName: 'Ferrara',
      occupation: 'waiter',
      hireDate: getRandomDate(),
    },
    {
      id: 8,
      lastName: 'Frances',
      firstName: 'Rossini',
      occupation: 'waiter',
      hireDate: getRandomDate(),
    },
    {
      id: 9,
      lastName: 'Roxie',
      firstName: 'Harvey',
      occupation: 'lifeguard',
      hireDate: getRandomDate(),
    },
    {
      id: 10,
      lastName: 'Smith',
      firstName: 'John',
      occupation: 'designer',
      hireDate: getRandomDate(),
    },
    {
      id: 11,
      lastName: 'Doe',
      firstName: 'Jane',
      occupation: 'engineer',
      hireDate: getRandomDate(),
    },
  ]

  return (
    <div style={{ height: 600, width: '100%' }}>
      <DataGridToolbar apiRef={apiRef} />
      <DataGrid
        apiRef={apiRef}
        columns={filterStoryColumns.columns}
        rows={rows}
        checkboxSelection
        disableSelectionOnClick
      />
    </div>
  )
})

function getRandomDate(): Date {
  return new Date(new Date().getTime() - Math.random() * 1e12)
}
