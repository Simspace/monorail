"use strict";(self.webpackChunk_monorail_storybook=self.webpackChunk_monorail_storybook||[]).push([[1020],{"../../node_modules/@mui/x-data-grid-premium/hooks/utils/useGridApiRef.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>useGridApiRef_useGridApiRef});var react=__webpack_require__("../../node_modules/react/index.js");const useGridApiRef_useGridApiRef=()=>react.useRef({})},"./src/DataGrid/DataGridGroupAndPivot.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Aggregation:()=>Aggregation,Default:()=>Default,Grouping:()=>Grouping,MasterDetail:()=>MasterDetail,Pivoting:()=>Pivoting,TreeData:()=>TreeData,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DataGridGroupAndPivot_stories});var react=__webpack_require__("../../node_modules/react/index.js");const currencyFormatter=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:0,maximumFractionDigits:0}),COLUMNS=[{field:"title",headerName:"Title",width:200,groupable:!1},{field:"gross",headerName:"Gross",type:"number",width:150,groupable:!1,valueFormatter:({value})=>value?currencyFormatter.format(value):""},{field:"company",headerName:"Company",width:200},{field:"director",headerName:"Director",width:200},{field:"year",headerName:"Year",type:"number",availableAggregationFunctions:["max","min"]},{field:"cinematicUniverse",headerName:"Cinematic Universe",width:220}],ROWS=[{id:0,title:"Avatar",gross:2847246203,budget:237e6,director:"James Cameron",company:"20th Century Fox",year:2009,imdbRating:7.9,composer:{name:"James Horner"}},{id:1,title:"Avengers: Endgame",gross:2797501328,budget:356e6,director:"Anthony & Joe Russo",company:"Disney Studios",year:2019,imdbRating:8.4,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Alan Silvestri"}},{id:2,title:"Titanic",gross:2187425379,budget:2e8,director:"James Cameron",company:"20th Century Fox",year:1997,imdbRating:7.9,composer:{name:"James Horner"}},{id:3,title:"Star Wars: The Force Awakens",gross:2068223624,budget:306e6,director:"J. J. Abrams",company:"Disney Studios",year:2015,imdbRating:7.9,cinematicUniverse:"Star Wars",composer:{name:"John Williams"}},{id:4,title:"Avengers: Infinity War",gross:2048359754,budget:321e6,director:"Anthony & Joe Russo",company:"Disney Studios",year:2018,imdbRating:8.5,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Alan Silvestri"}},{id:5,title:"Spider-Man: No Way Home",gross:1892768346,budget:2e8,director:"Jon Watts",company:"Disney Studios",year:2021,imdbRating:8.3,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Michael Giacchino"}},{id:6,title:"Jurassic World",gross:1671713208,budget:15e7,director:"Colin Trevorrow",company:"Universal Pictures",year:2015,imdbRating:7,cinematicUniverse:"Jurassic Park",composer:{name:"Michael Giacchino"}},{id:7,title:"The Lion King",gross:1656943394,budget:26e7,director:"Jon Favreau",company:"Disney Studios",year:2019,imdbRating:6.9,composer:{name:"Hans Zimmer"}},{id:8,title:"The Avengers",gross:1518812988,budget:22e7,director:"Joss Whedon",company:"Disney Studios",year:2012,imdbRating:8.1,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Alan Silvestri"}},{id:9,title:"Furious 7",gross:1516045911,budget:19e7,director:"James Wan",company:"Universal Pictures",year:2015,imdbRating:7.2,cinematicUniverse:"Fast & Furious",composer:{name:"Brian Tyler"}},{id:10,title:"Frozen II",gross:1450026933,budget:15e7,director:"Chris Buck & Jennifer Lee",company:"Disney Studios",year:2019,imdbRating:6.8,cinematicUniverse:"Frozen",composer:{name:"Christophe Beck"}},{id:11,title:"Avengers: Age of Ultron",gross:1402804868,budget:28e7,director:"Joss Whedon",company:"Disney Studios",year:2015,imdbRating:7.3,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Danny Elfman"}},{id:12,title:"Black Panther",gross:1347280838,budget:2e8,director:"Ryan Coogler",company:"Disney Studios",year:2018,imdbRating:7.3,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Ludwig Göransson"}},{id:13,title:"Harry Potter and the Deathly Hallows – Part 2",gross:1342025430,budget:125e6,director:"David Yates",company:"Warner Bros. Pictures",year:2011,imdbRating:8.2,cinematicUniverse:"Harry Potter",composer:{name:"Alexandre Desplat"}},{id:14,title:"Star Wars: The Last Jedi",gross:1332539889,budget:317e6,director:"Rian Johnson",company:"Disney Studios",year:2017,imdbRating:6.9,cinematicUniverse:"Star Wars",composer:{name:"John Williams"}},{id:15,title:"Jurassic World: Fallen Kingdom",gross:1309484461,budget:17e7,director:"J. A. Bayona",company:"Universal Pictures",year:2018,cinematicUniverse:"Jurassic Park",imdbRating:6.2,composer:{name:"Michael Giacchino"}},{id:16,title:"Frozen",gross:129e7,budget:15e7,director:"Chris Buck & Jennifer Lee",company:"Disney Studios",year:2013,imdbRating:7.5,cinematicUniverse:"Frozen",composer:{name:"Christophe Beck"}},{id:17,title:"Beauty and the Beast",gross:1263521136,budget:16e7,director:"Bill Condon",company:"Disney Studios",year:2017,imdbRating:7.1,composer:{name:"Alan Menken"}},{id:18,title:"Incredibles 2",gross:1242805359,budget:2e8,director:"Brad Bird",company:"Disney Studios",year:2018,imdbRating:7.6,composer:{name:"Michael Giacchino"}},{id:19,title:"The Fate of the Furious",gross:1238764765,budget:25e7,director:"F. Gary Gray",company:"Universal Pictures",year:2017,imdbRating:6.6,cinematicUniverse:"Fast & Furious",composer:{name:"Brian Tyler"}},{id:20,title:"Iron Man 3",gross:1214811252,budget:2e8,director:"Shane Black",company:"Disney Studios",year:2013,imdbRating:7.2,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Brian Tyler"}},{id:21,title:"Minions",gross:1159398397,budget:74e6,director:"Pierre Coffin & Kyle Balda",company:"Universal Pictures",year:2015,imdbRating:6.4,composer:{name:"Heitor Pereira"}},{id:22,title:"Captain America: Civil War",gross:1153329473,budget:25e7,director:"Anthony & Joe Russo",company:"Disney Studios",year:2016,imdbRating:7.8,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Henry Jackman"}},{id:23,title:"Aquaman",gross:1148485886,budget:16e7,director:"James Wan",company:"Warner Bros. Pictures",year:2018,imdbRating:6.8,cinematicUniverse:"DC Cinematic Universe",composer:{name:"Rupert Gregson-Williams"}},{id:24,title:"The Lord of the Rings: The Return of the King",gross:1146030912,budget:94e6,director:"Peter Jackson",company:"New Line Cinema",year:2003,imdbRating:9,cinematicUniverse:"The Lord of the Rings",composer:{name:"Howard Shore"}},{id:25,title:"Spider-Man: Far From Home",gross:1131927996,budget:16e7,director:"Jon Watts",company:"Disney Studios",year:2019,imdbRating:7.4,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Michael Giacchino"}},{id:26,title:"Captain Marvel",gross:1128274794,budget:152e6,director:"Anna Boden & Ryan Fleck",company:"Disney Studios",year:2019,imdbRating:6.8,cinematicUniverse:"Marvel Cinematic Universe",composer:{name:"Pinar Toprak"}},{id:27,title:"Transformers: Dark of the Moon",gross:1123794079,budget:195e6,director:"Michael Bay",company:"Paramount Pictures",year:2011,imdbRating:6.2,cinematicUniverse:"Transformers",composer:{name:"Steve Jablonsky"}},{id:28,title:"Skyfall",gross:1108561013,budget:2e8,director:"Sam Mendes",company:"20th Century Fox",year:2012,imdbRating:7.8,cinematicUniverse:"James Bond",composer:{name:"Thomas Newman"}},{id:29,title:"Transformers: Age of Extinction",gross:1104054072,budget:21e7,director:"Michael Bay",company:"Paramount Pictures",year:2014,imdbRating:5.6,cinematicUniverse:"Transformers",composer:{name:"Steve Jablonsky"}},{id:30,title:"The Dark Knight Rises",gross:1081142612,budget:25e7,director:"Christopher Nolan",company:"Warner Bros. Pictures",year:2012,imdbRating:8.4,cinematicUniverse:"Batman",composer:{name:"Hans Zimmer"}},{id:31,title:"Joker",gross:1074251311,budget:55e6,director:"Todd Phillips",company:"Warner Bros. Pictures",year:2019,imdbRating:8.4,cinematicUniverse:"Batman",composer:{name:"Hildur Guðnadóttir"}},{id:32,title:"Star Wars: The Rise of Skywalker",gross:1074144248,budget:275e6,director:"J. J. Abrams",company:"Disney Studios",year:2019,imdbRating:6.5,cinematicUniverse:"Star Wars",composer:{name:"John Williams"}},{id:33,title:"Toy Story 4",gross:1073394593,budget:2e8,director:"Josh Cooley",company:"Disney Studios",year:2019,imdbRating:7.7,cinematicUniverse:"Toy Story",composer:{name:"Randy Newman"}},{id:34,title:"Toy Story 3",gross:1066969703,budget:2e8,director:"Lee Unkrich",company:"Disney Studios",year:2010,imdbRating:8.3,cinematicUniverse:"Toy Story",composer:{name:"Randy Newman"}}];var DataGrid=__webpack_require__("../components/src/DataGrid/DataGrid.tsx"),useGridApiRef=__webpack_require__("../../node_modules/@mui/x-data-grid-premium/hooks/utils/useGridApiRef.js"),esm_extends=__webpack_require__("../../node_modules/@mui/x-data-grid-premium/node_modules/@babel/runtime/helpers/esm/extends.js"),gridColumnsSelector=__webpack_require__("../../node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js");const updateColumnVisibilityModel=(columnVisibilityModel,rowGroupingModel,prevRowGroupingModel)=>{const newColumnVisibilityModel=(0,esm_extends.Z)({},columnVisibilityModel);return null==rowGroupingModel||rowGroupingModel.forEach((field=>{null!=prevRowGroupingModel&&prevRowGroupingModel.includes(field)||(newColumnVisibilityModel[field]=!1)})),null==prevRowGroupingModel||prevRowGroupingModel.forEach((field=>{null!=rowGroupingModel&&rowGroupingModel.includes(field)||(newColumnVisibilityModel[field]=!0)})),newColumnVisibilityModel};var storybook=__webpack_require__("./src/helpers/storybook.ts"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const DataGridGroupAndPivot_stories={title:"Data Grid/Group & Pivot",component:DataGrid._},Template=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{}))),Default=(0,storybook.yg)(Template);Default.parameters={docs:{description:{component:"🚧 This feature isn't implemented yet. It's coming.\n      \nUse grouping, pivoting and more to analyse the data in depth."}},creevey:{skip:"🚧 This feature isn't implemented yet. It's coming."}};const TreeData=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));TreeData.storyName="Tree data",TreeData.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro` \n\n🚧 This feature isn't implemented yet. It's coming.\n      \nTree data allows to visualize self-referential hierarchical (tree-like structure) data."}},creevey:{skip:"🚧 This feature isn't implemented yet. It's coming."}};const MasterDetail=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));MasterDetail.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro`\n      \n🚧 This feature isn't implemented yet. It's coming.\n      \nThe feature allows to display row details on an expandable pane."}},creevey:{skip:"🚧 This feature isn't implemented yet. It's coming."}};const Grouping=(0,storybook.yg)((()=>{const data={rows:ROWS,columns:COLUMNS},apiRef=(0,useGridApiRef.A)(),initialState=(props=>{var _props$rowGroupingMod,_props$initialState,_props$initialState$r;const initialProps=react.useRef(props),rowGroupingModel=react.useRef(null!=(_props$rowGroupingMod=props.rowGroupingModel)?_props$rowGroupingMod:null==(_props$initialState=props.initialState)||null==(_props$initialState$r=_props$initialState.rowGrouping)?void 0:_props$initialState$r.model);return react.useEffect((()=>{props.apiRef.current.subscribeEvent("rowGroupingModelChange",(newModel=>{const columnVisibilityModel=updateColumnVisibilityModel((0,gridColumnsSelector.g0)(props.apiRef),newModel,rowGroupingModel.current);props.apiRef.current.setColumnVisibilityModel(columnVisibilityModel),rowGroupingModel.current=newModel}))}),[props.apiRef]),react.useMemo((()=>{var _invariantInitialStat;const invariantInitialState=initialProps.current.initialState,columnVisibilityModel=updateColumnVisibilityModel(null==invariantInitialState||null==(_invariantInitialStat=invariantInitialState.columns)?void 0:_invariantInitialStat.columnVisibilityModel,rowGroupingModel.current,void 0);return(0,esm_extends.Z)({},invariantInitialState,{columns:(0,esm_extends.Z)({},null==invariantInitialState?void 0:invariantInitialState.columns,{columnVisibilityModel})})}),[])})({apiRef,initialState:{rowGrouping:{model:["company"]}}});return(0,jsx_runtime.jsx)("div",{style:{height:800,width:"100%"},children:(0,jsx_runtime.jsx)(DataGrid._,{rows:data.rows,columns:[{field:"__reorder__",sortable:!1,valueGetter:params=>params.row.title},...data.columns],rowReordering:!0,apiRef,rowGroupingColumnMode:"single",checkboxSelection:!0,initialState})})}));Grouping.parameters={docs:{description:{story:"❗️ Only available in the Premium plan\n      \nGroup rows together that share a column value, this creates a visible header for each group and allows the end-user to collapse groups that they don't want to see."}},creevey:{skip:"🚧 This feature isn't implemented yet. It's coming."}};const Aggregation=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));Aggregation.parameters={docs:{description:{story:"❗️ Only available in the Premium plan\n      \n🚧 This feature isn't implemented yet. It's coming.\n      \nWhen grouping, you will be able to apply an aggregation function to populate the group row with values."}},creevey:{skip:"🚧 This feature isn't implemented yet. It's coming."}};const Pivoting=(0,storybook.yg)((()=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})));Pivoting.parameters={docs:{description:{story:"❗️ Only available in the Premium plan\n      \n🚧 This feature isn't implemented yet. It's coming.\n      \nPivoting will allow you to take a columns values and turn them into columns."}},creevey:{skip:"🚧 This feature isn't implemented yet. It's coming."}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"story(Template)",...Default.parameters?.docs?.source}}},TreeData.parameters={...TreeData.parameters,docs:{...TreeData.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...TreeData.parameters?.docs?.source},description:{story:"Tree data",...TreeData.parameters?.docs?.description}}},MasterDetail.parameters={...MasterDetail.parameters,docs:{...MasterDetail.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...MasterDetail.parameters?.docs?.source},description:{story:"Master detail",...MasterDetail.parameters?.docs?.description}}},Grouping.parameters={...Grouping.parameters,docs:{...Grouping.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  const data = useMovieData();\n  const apiRef = useGridApiRef();\n  const initialState = useKeepGroupedColumnsHidden({\n    apiRef,\n    initialState: {\n      rowGrouping: {\n        model: ['company']\n      }\n    }\n  });\n  return <div style={{\n    height: 800,\n    width: '100%'\n  }}>\n      <DataGrid rows={data.rows} columns={[{\n      field: '__reorder__',\n      sortable: false,\n      valueGetter: params => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return (params.row.title as string);\n      }\n    }, ...data.columns]} rowReordering apiRef={apiRef} rowGroupingColumnMode=\"single\" checkboxSelection initialState={initialState} />\n    </div>;\n})",...Grouping.parameters?.docs?.source},description:{story:"Grouping",...Grouping.parameters?.docs?.description}}},Aggregation.parameters={...Aggregation.parameters,docs:{...Aggregation.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...Aggregation.parameters?.docs?.source},description:{story:"Aggregation",...Aggregation.parameters?.docs?.description}}},Pivoting.parameters={...Pivoting.parameters,docs:{...Pivoting.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...Pivoting.parameters?.docs?.source},description:{story:"Pivoting",...Pivoting.parameters?.docs?.description}}};const __namedExportsOrder=["Default","TreeData","MasterDetail","Grouping","Aggregation","Pivoting"];try{TreeData.displayName="TreeData",TreeData.__docgenInfo={description:"Tree data",displayName:"TreeData",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridGroupAndPivot.stories.tsx#TreeData"]={docgenInfo:TreeData.__docgenInfo,name:"TreeData",path:"src/DataGrid/DataGridGroupAndPivot.stories.tsx#TreeData"})}catch(__react_docgen_typescript_loader_error){}try{MasterDetail.displayName="MasterDetail",MasterDetail.__docgenInfo={description:"Master detail",displayName:"MasterDetail",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridGroupAndPivot.stories.tsx#MasterDetail"]={docgenInfo:MasterDetail.__docgenInfo,name:"MasterDetail",path:"src/DataGrid/DataGridGroupAndPivot.stories.tsx#MasterDetail"})}catch(__react_docgen_typescript_loader_error){}try{Grouping.displayName="Grouping",Grouping.__docgenInfo={description:"Grouping",displayName:"Grouping",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridGroupAndPivot.stories.tsx#Grouping"]={docgenInfo:Grouping.__docgenInfo,name:"Grouping",path:"src/DataGrid/DataGridGroupAndPivot.stories.tsx#Grouping"})}catch(__react_docgen_typescript_loader_error){}try{Aggregation.displayName="Aggregation",Aggregation.__docgenInfo={description:"Aggregation",displayName:"Aggregation",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridGroupAndPivot.stories.tsx#Aggregation"]={docgenInfo:Aggregation.__docgenInfo,name:"Aggregation",path:"src/DataGrid/DataGridGroupAndPivot.stories.tsx#Aggregation"})}catch(__react_docgen_typescript_loader_error){}try{Pivoting.displayName="Pivoting",Pivoting.__docgenInfo={description:"Pivoting",displayName:"Pivoting",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridGroupAndPivot.stories.tsx#Pivoting"]={docgenInfo:Pivoting.__docgenInfo,name:"Pivoting",path:"src/DataGrid/DataGridGroupAndPivot.stories.tsx#Pivoting"})}catch(__react_docgen_typescript_loader_error){}}}]);