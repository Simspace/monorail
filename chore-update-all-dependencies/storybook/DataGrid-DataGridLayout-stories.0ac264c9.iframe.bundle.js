"use strict";(self.webpackChunk_monorail_storybook=self.webpackChunk_monorail_storybook||[]).push([[5298],{"./src/DataGrid/DataGridLayout.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoHeightGrid:()=>AutoHeightGrid,Default:()=>Default,FixedSizeGrid:()=>FixedSizeGrid,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("../../node_modules/react/index.js");var _mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js"),_monorail_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../components/src/DataGrid/DataGrid.tsx"),_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/helpers/storybook.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Data Grid/Layout",component:_monorail_components__WEBPACK_IMPORTED_MODULE_3__._},Template=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:5,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{display:"flex",height:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{flexGrow:1},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...data,...args})})})})})),Default=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)(Template);Default.parameters={docs:{description:{component:"The data grid offers multiple layout mode.\n\nBy default, the grid has no intrinsic dimensions. It occupies the space its parent leaves.\n\n> ⚠️ When using % (**percentage**) for your height or width. You need to make sure the container you are putting the grid into also has an intrinsic dimension. The browsers fit the element according to a percentage of the parent dimension. If the parent has no dimensions, then the % will be zero.\n\n### Flex layout\n\nIt's recommended to use a flex container to render the grid. This allows a flexible layout, resizes well, and works on all devices."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const FixedSizeGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:5,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:350,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,...data})})})}));FixedSizeGrid.storyName="Predefined dimensions",FixedSizeGrid.parameters={docs:{description:{story:"You can predefine dimensions for the parent of the grid."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const AutoHeightGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:4,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{style:{height:400,width:"100%"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{autoHeight:!0,...args,...data}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p",{children:"more content"})]})}));AutoHeightGrid.storyName="Auto height",AutoHeightGrid.parameters={docs:{description:{story:"The  `autoHeight`  prop allows the grid to size according to its content. This means that the number of rows will drive the height of the grid and consequently, they will all be rendered and visible to the user at the same time.\n\n> ⚠️ This is not recommended for large datasets as row virtualization will not be able to improve performance by limiting the number of elements rendered in the DOM."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"story(Template)",...Default.parameters?.docs?.source}}},FixedSizeGrid.parameters={...FixedSizeGrid.parameters,docs:{...FixedSizeGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 5,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <div style={{\n      height: 350,\n      width: '100%'\n    }}>\n        <DataGrid {...args} {...data} />\n      </div>\n    </div>;\n})",...FixedSizeGrid.parameters?.docs?.source}}},AutoHeightGrid.parameters={...AutoHeightGrid.parameters,docs:{...AutoHeightGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 4,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid autoHeight {...args} {...data} />\n      <p>more content</p>\n    </div>;\n})",...AutoHeightGrid.parameters?.docs?.source}}};const __namedExportsOrder=["Default","FixedSizeGrid","AutoHeightGrid"]}}]);