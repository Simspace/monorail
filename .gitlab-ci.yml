image: node:lts

cache:
  paths:
    - node_modules/
    - .yarn

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - build
  - test
  - build-deployments
  - deploy
  - pages

before_script:
  - yarn install --immutable

build:
  stage: build
  artifacts:
    paths:
      - packages/**/dist
      - packages/**/build
  script:
    - yarn workspace @monorail/scripts build
    - yarn build-pack

lint:
  stage: test
  script:
    - yarn eslint
    - yarn prettier:check

test:
  stage: test
  script:
    - yarn test

storybook:
  stage: build-deployments
  dependencies:
    - build
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - ./packages/storybook/storybook
  script: yarn build-storybook --output-dir storybook

playroom:
  stage: build-deployments
  dependencies:
    - build
  artifacts:
    paths:
      - ./playroom
  script: yarn build-playroom

deploy-storybook:
  stage: deploy
  script:
    - echo "Creating storybook environment for $CI_COMMIT_REF_SLUG"
  environment:
    name: storybook/$CI_COMMIT_REF_SLUG
    url: https://simspace.gitlab.io/engineering/ux-engineering/monorail/$CI_COMMIT_REF_SLUG/storybook/
    on_stop: remove-storybook

remove-storybook:
  stage: deploy
  cache:
    key: "monorail-storybook"
    paths:
      - public
  script:
    - |
      git config --global user.email "<>"
      git config --global user.name "CI"
      git remote set-url origin https://${CI_REGISTRY_USER}:${CI_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}
      rm -rf public
      git fetch
      git checkout pages
      rm -rf public/${CI_COMMIT_REF_SLUG}
      git reset --soft HEAD^
      git add .
      git commit -m "[CI] Publish Pages"
      git push origin pages -f
  when: manual
  variables:
    GIT_STRATEGY: none
  environment:
    name: storybook/$CI_COMMIT_REF_SLUG
    action: stop

pages:
  stage: pages
  artifacts:
    paths:
      - public
  dependencies:
    - storybook
    - playroom
  script:
    - |
      git config --global user.email "<>"
      git config --global user.name "CI"
      git remote set-url origin https://${CI_REGISTRY_USER}:${CI_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}
      rm -rf public
      git fetch
      git checkout pages
      rm -rf public/${CI_COMMIT_REF_SLUG}
      mkdir -p "public/${CI_COMMIT_REF_SLUG}"
      mv ./packages/storybook/storybook "public/${CI_COMMIT_REF_SLUG}"
      mv ./playroom "public/${CI_COMMIT_REF_SLUG}"
      git reset --soft HEAD^
      git add .
      git commit -m "[CI] Publish Pages"
      git push origin pages -f

publish:
  stage: deploy
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME =~ /^v\d+\.\d+\.\d+.*$/
  script:
    - |
      GITLAB_PROJECT_PACKAGE_URL=//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
      yarn config set "npmRegistries[\"$GITLAB_PROJECT_PACKAGE_URL\"].npmAlwaysAuth" "true"
      yarn config set "npmRegistries[\"$GITLAB_PROJECT_PACKAGE_URL\"].npmAuthToken" "$CI_JOB_TOKEN"
      for f in ./packages/* ;
        do if [ -d "$f" ]; then
          echo $f
          cd "$f"

          if [[ $(node -p "require('./package.json').private") == true ]]; then
            cd ../../
            continue
          fi

          # Extract a few values from package.json
          NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
          NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
          REPO_PACKAGE_VERSION=$(node ../../scripts/get-latest-published-version.js $NPM_PACKAGE_NAME)
          {
            echo "@monorail:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
            echo "${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}"
          } >> dist/.npmrc

          echo ".npmrc" >> dist/.npmignore
          echo "Created the following .npmrc:"
          cat dist/.npmrc

          if [[ ${REPO_PACKAGE_VERSION} != *"${NPM_PACKAGE_VERSION}"* ]]; then
            cd dist && npm publish
            echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
          else
            echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
          fi

          cd ../../../
        fi
      done
