"use strict";(self.webpackChunk_monorail_storybook=self.webpackChunk_monorail_storybook||[]).push([[503],{"./src/DataGrid/DataGridRows.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ApiRefRowsGrid:()=>ApiRefRowsGrid,Default:()=>Default,DenseHeightGrid:()=>DenseHeightGrid,InfiniteLoadingGrid:()=>InfiniteLoadingGrid,RowReorderGrid:()=>RowReorderGrid,RowSpanningGrid:()=>RowSpanningGrid,StylingRows:()=>StylingRows,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("../../node_modules/react/index.js");var _mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js"),_monorail_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../components/src/DataGrid/DataGrid.tsx"),_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/helpers/storybook.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Data Grid/Rows",component:_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,parameters:{creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}}},Template=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:250,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,columns:[{field:"name"}],rows:[{id:1,name:"React"},{id:2,name:"Material-UI"}]})}))),Default=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)(Template);Default.parameters={docs:{description:{component:'### Feeding data\nGrid rows can be defined with the rows prop. rows expects an array of objects. Rows should have this type: GridRowData[]. The columns\' "field" property should match a key of the row object (GridRowData).'}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const InfiniteLoadingGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));InfiniteLoadingGrid.storyName="Updating rows",InfiniteLoadingGrid.parameters={docs:{description:{story:"Rows can be updated in two ways:\n\n### The  `rows`  prop\n\nThe simplest way is to provide the new rows using the  `rows`  prop. It replaces the previous values. This approach has some drawbacks:\n\n-   You need to provide all the rows.\n-   You might create a performance bottleneck when preparing the rows array to provide to the grid.\n\n### Infinite loading\n\n‚ùóÔ∏è Only available in `DataGridPro` (https://mui.com/components/data-grid/rows/#infinite-loading)\n\nThe grid provides a  `onRowsScrollEnd`  prop that can be used to load additional rows when the scroll reaches the bottom of the viewport area.\n\nIn addition, the area in which the callback provided to the  `onRowsScrollEnd`  is called can be changed using  `scrollEndThreshold`."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ApiRefRowsGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));ApiRefRowsGrid.parameters={docs:{description:{story:"‚ùóÔ∏è Only available in `DataGridPro` (https://mui.com/components/data-grid/rows/#apiref)\n      \nThe second way to update rows is to use the apiRef. This is an imperative API that is designed to solve the previous two limitations of the declarative  `rows`  prop.  `apiRef.current.updateRows()`, updates the rows to the grid. It  **merges**  the new rows with the previous ones.\n\nThe following demo updates the rows every 200ms.\n\nThe default behavior of  `updateRows`  API is to upsert rows. So if a row has an id that is not in the current list of rows then it will be added to the grid.\n\nAlternatively, if you would like to delete a row, you would need to pass an extra  `_action`  property in the update object as below.\n\napiRef.current.updateRows([{ id: 1, _action: 'delete' }]);\n"}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const DenseHeightGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:100,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{rowHeight:25,...args,...data})})}));DenseHeightGrid.storyName="Row height",DenseHeightGrid.parameters={docs:{description:{story:"By default, the rows have a height of 52 pixels. This matches the normal height in the  [Material Design guidelines](https://material.io/components/data-tables).\n    \nTo change the row height for the whole grid, set the  `rowHeight`  prop:"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const StylingRows=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));StylingRows.parameters={docs:{description:{story:"You can check the [styling rows](https://mui.com/components/data-grid/style/#styling-rows) section for more information."}},creevey:{skip:"Text-only story. Nothing to preview."}};const RowSpanningGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));RowSpanningGrid.parameters={docs:{description:{story:"üöß This feature isn't implemented yet. It's coming.\n\n\nGrouping columns allows you to have multiple levels of columns in your header and the ability, if needed, to 'open and close' column groups to show and hide additional columns."}},creevey:{skip:"üöß This feature isn't implemented yet. It's coming."}};const RowReorderGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));RowReorderGrid.parameters={docs:{description:{story:"‚ùóÔ∏è Only available in `DataGridPro` (https://mui.com/components/data-grid/rows/#row-reorder)\n\nüöß This feature isn't implemented yet. It's coming.\n\nGrouping columns allows you to have multiple levels of columns in your header and the ability, if needed, to 'open and close' column groups to show and hide additional columns."}},creevey:{skip:"üöß This feature isn't implemented yet. It's coming."}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"story(Template)",...Default.parameters?.docs?.source}}},InfiniteLoadingGrid.parameters={...InfiniteLoadingGrid.parameters,docs:{...InfiniteLoadingGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // const [loading, setLoading] = React.useState(false)\n  // const [loadedRows, setLoadedRows] = React.useState<any>([])\n  // const mounted = React.useRef(true)\n  // const { data } = useDemoData({\n  //   dataSet: 'Commodity',\n  //   rowLength: 20,\n  //   maxColumns: 6,\n  // })\n\n  // const loadServerRows = async (newRowLength: any) => {\n  //   setLoading(true)\n  //   const newData = await getRealData(newRowLength, getCommodityColumns())\n  //   // Simulate network throttle\n  //   await sleep(Math.random() * 500 + 100)\n\n  //   if (mounted.current) {\n  //     setLoading(false)\n  //     setLoadedRows(loadedRows.concat(newData.rows))\n  //   }\n  // }\n\n  // const handleOnRowsScrollEnd = (params: any) => {\n  //   if (loadedRows.length <= MAX_ROW_LENGTH) {\n  //     loadServerRows(params.viewportPageSize)\n  //   }\n  // }\n\n  // React.useEffect(() => {\n  //   return () => {\n  //     mounted.current = false\n  //   }\n  // }, [])\n\n  return <></>\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // <div style={{ height: 400, width: '100%' }}>\n  //   <DataGridPro\n  //     {...args}\n  //     {...data}\n  //     rows={data.rows.concat(loadedRows)}\n  //     loading={loading}\n  //     hideFooterPagination\n  //     onRowsScrollEnd={handleOnRowsScrollEnd}\n  //     components={{\n  //       LoadingOverlay: CustomLoadingOverlay,\n  //     }}\n  //   />\n  // </div>\n  ;\n})",...InfiniteLoadingGrid.parameters?.docs?.source}}},ApiRefRowsGrid.parameters={...ApiRefRowsGrid.parameters,docs:{...ApiRefRowsGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  // const columns = [\n  //   { field: 'id' },\n  //   { field: 'username', width: 150 },\n  //   { field: 'age', width: 80, type: 'number' },\n  // ]\n\n  // const rows = [\n  //   { id: 1, username: randomUserName(), age: randomInt(10, 80) },\n  //   { id: 2, username: randomUserName(), age: randomInt(10, 80) },\n  //   { id: 3, username: randomUserName(), age: randomInt(10, 80) },\n  //   { id: 4, username: randomUserName(), age: randomInt(10, 80) },\n  // ]\n  // const apiRef = useGridApiRef()\n\n  // React.useEffect(() => {\n  //   const subscription = interval(200).subscribe(() => { // internal() from rxjs\n  //     apiRef.current.updateRows([\n  //       {\n  //         id: randomInt(1, 4),\n  //         username: randomUserName(),\n  //         age: randomInt(10, 80),\n  //       },\n  //       {\n  //         id: randomInt(1, 4),\n  //         username: randomUserName(),\n  //         age: randomInt(10, 80),\n  //       },\n  //     ]);\n  //   });\n\n  //   return () => {\n  //     subscription.unsubscribe();\n  //   };\n  // }, [apiRef]);\n\n  return <></>\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // <div style={{ height: 400, width: '100%' }}>\n  //   <DataGridPro rows={rows} columns={columns} apiRef={apiRef} />\n  // </div>\n  ;\n})",...ApiRefRowsGrid.parameters?.docs?.source}}},DenseHeightGrid.parameters={...DenseHeightGrid.parameters,docs:{...DenseHeightGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid rowHeight={25} {...args} {...data} />\n    </div>;\n})",...DenseHeightGrid.parameters?.docs?.source}}},StylingRows.parameters={...StylingRows.parameters,docs:{...StylingRows.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...StylingRows.parameters?.docs?.source}}},RowSpanningGrid.parameters={...RowSpanningGrid.parameters,docs:{...RowSpanningGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...RowSpanningGrid.parameters?.docs?.source}}},RowReorderGrid.parameters={...RowReorderGrid.parameters,docs:{...RowReorderGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...RowReorderGrid.parameters?.docs?.source}}};const __namedExportsOrder=["Default","InfiniteLoadingGrid","ApiRefRowsGrid","DenseHeightGrid","StylingRows","RowSpanningGrid","RowReorderGrid"]}}]);