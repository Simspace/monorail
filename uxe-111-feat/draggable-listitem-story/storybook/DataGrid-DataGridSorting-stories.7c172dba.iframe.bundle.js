"use strict";(self.webpackChunk_monorail_storybook=self.webpackChunk_monorail_storybook||[]).push([[775],{"./src/DataGrid/DataGridSorting.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ComparatorSortingGrid:()=>ComparatorSortingGrid,DataGridSortingApiRef:()=>DataGridSortingApiRef,Default:()=>Default,DisableSortingGrid:()=>DisableSortingGrid,MultiSortingGrid:()=>MultiSortingGrid,OrderSortingGrid:()=>OrderSortingGrid,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js"),_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/services/random-generator.js"),_monorail_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../components/src/DataGrid/DataGrid.tsx"),_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/helpers/storybook.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Data Grid/Sorting",component:_monorail_components__WEBPACK_IMPORTED_MODULE_3__._},Template=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:10,maxColumns:6}),[sortModel,setSortModel]=react__WEBPACK_IMPORTED_MODULE_0__.useState([{field:"commodity",sort:"asc"}]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,...data,sortModel,onSortModelChange:model=>setSortModel(model)})})})),Default=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)(Template);Default.parameters={docs:{description:{component:"Single column sorting can be triggered with by clicking a column header. Repeat this action to change the sorting direction.\n\nA sorted column can be can pre-configured using the  `sortModel`  prop of the  `GridColDef`  interface:"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const columns=[{field:"name"},{field:"age",type:"number"},{field:"username",valueGetter:params=>`${params.row.name??"unknown"} - ${params.row.age??"x"}`,sortComparator:(v1,v2,param1,param2)=>param1.api.getCellValue(param1.id,"age")-param2.api.getCellValue(param2.id,"age"),width:150},{field:"dateCreated",type:"date",width:180},{field:"lastLogin",type:"dateTime",width:180}],rows=[{id:1,name:"Damien",age:25,dateCreated:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.vx)(),lastLogin:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.ub)()},{id:2,name:"Nicolas",age:36,dateCreated:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.vx)(),lastLogin:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.ub)()},{id:3,name:"Kate",age:19,dateCreated:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.vx)(),lastLogin:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.ub)()},{id:4,name:"Sebastien",age:28,dateCreated:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.vx)(),lastLogin:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.ub)()},{id:5,name:"Louise",age:23,dateCreated:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.vx)(),lastLogin:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.ub)()},{id:6,name:"George",age:10,dateCreated:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.vx)(),lastLogin:(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_5__.ub)()}],ComparatorSortingGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const[sortModel,setSortModel]=react__WEBPACK_IMPORTED_MODULE_0__.useState([{field:"username",sort:"asc"}]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{sortModel,rows,columns,onSortModelChange:model=>setSortModel(model),...args})})}));ComparatorSortingGrid.storyName="Custom comparator",ComparatorSortingGrid.parameters={docs:{description:{story:"The grid handles sorting and applies different comparators in columns according to their types. The component handles sorting natively for the following types:\n\n-   string\n-   number\n-   date\n-   dateTime\n\nTo extend or modify this behavior in a specific column, you can pass in a custom comparator, and override the  `sortComparator`  prop of the  `GridColDef`  interface.\n\nIn the example below, the  `username`  column combines  `name`  and  `age`, but it is sorted by  `age`  using a custom comparator:"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const OrderSortingGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:10,maxColumns:6}),[sortModel,setSortModel]=react__WEBPACK_IMPORTED_MODULE_0__.useState([{field:"commodity",sort:"asc"}]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{sortingOrder:["desc","asc"],sortModel,onSortModelChange:model=>setSortModel(model),...data,...args})})}));OrderSortingGrid.storyName="Sort order",OrderSortingGrid.parameters={docs:{description:{story:"By default, the sort order cycles between these three different modes:\n\n\n    const sortingOrder = ['asc', 'desc', null];\n\n\nIn practice, when you click a column that is not sorted, it will sort ascending (`asc`). The next click will make it sort descending (`desc`). Another click will remove the sort (`null`), reverting to the order that the data was provided in. This behavior can be overwritten by setting the  `sortingOrder`  prop.\n\nIn the example below columns are only sortable in descending or ascending order."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const DisableSortingGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:10,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,...data,columns:data.columns.map((column=>({...column,sortable:!1})))})})}));DisableSortingGrid.storyName="Disable ordering",DisableSortingGrid.parameters={docs:{description:{story:"By default, all columns are sortable. This can be revoked using the sortable prop of the `GridColDef` interface:\n      \n    const columns: GridColDef = [{ field: 'name', sortable: false }];\n      \n      "}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const MultiSortingGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));MultiSortingGrid.storyName="Multi-column sorting",MultiSortingGrid.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro`\n      \nYou can sort by multiple columns at the same time using `DataGridPro`. Hold down the CTRL or Shift (use ⌘ Command on macOS) key while clicking the column header."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const DataGridSortingApiRef=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));DataGridSortingApiRef.storyName="apiRef",DataGridSortingApiRef.parameters={docs:{description:{story:"The grid exposes a set of methods that enables all of these features using the imperative apiRef.\n\n> ⚠️ Only use this API when you have no alternative. Always start from the declarative API that the grid exposes.\n\n-   `getSortModel`: Get the sort model currently applied to the grid.\n-   `setSortModel`: Set the sort model and trigger the sorting of rows.\n-   `onSortModelChange`: Callback fired when the column sorting changed before the grid has sorted its rows."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"story(Template)",...Default.parameters?.docs?.source}}},ComparatorSortingGrid.parameters={...ComparatorSortingGrid.parameters,docs:{...ComparatorSortingGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const [sortModel, setSortModel] = React.useState<GridSortModel>([{\n    field: 'username',\n    sort: ('asc' as GridSortDirection)\n  }]);\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid sortModel={sortModel} rows={rows} columns={columns} onSortModelChange={model => setSortModel(model)} {...args} />\n    </div>;\n})",...ComparatorSortingGrid.parameters?.docs?.source}}},OrderSortingGrid.parameters={...OrderSortingGrid.parameters,docs:{...OrderSortingGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 6\n  });\n  const [sortModel, setSortModel] = React.useState<GridSortModel>([{\n    field: 'commodity',\n    sort: ('asc' as GridSortDirection)\n  }]);\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid sortingOrder={['desc', 'asc']} sortModel={sortModel} onSortModelChange={model => setSortModel(model)} {...data} {...args} />\n    </div>;\n})",...OrderSortingGrid.parameters?.docs?.source}}},DisableSortingGrid.parameters={...DisableSortingGrid.parameters,docs:{...DisableSortingGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid {...args} {...data} columns={data.columns.map(column => ({\n      ...column,\n      sortable: false\n    } as GridColDef))} />\n    </div>;\n})",...DisableSortingGrid.parameters?.docs?.source}}},MultiSortingGrid.parameters={...MultiSortingGrid.parameters,docs:{...MultiSortingGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  // const { data } = useDemoData({\n  //   dataSet: 'Commodity',\n  //   rowLength: 100,\n  //   maxColumns: 6,\n  // })\n\n  // const [sortModel, setSortModel] = React.useState<GridSortModel>([\n  //   {\n  //     field: 'commodity',\n  //     sort: 'asc' as GridSortDirection,\n  //   },\n  //   {\n  //     field: 'desk',\n  //     sort: 'desc' as GridSortDirection,\n  //   },\n  // ])\n\n  return <></>\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // <div style={{ height: 400, width: '100%' }}>\n  //   <DataGridPro\n  //     {...data}\n  //     sortModel={sortModel}\n  //     onSortModelChange={(model) => setSortModel(model)}\n  //   />\n  // </div>\n  ;\n})",...MultiSortingGrid.parameters?.docs?.source}}},DataGridSortingApiRef.parameters={...DataGridSortingApiRef.parameters,docs:{...DataGridSortingApiRef.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...DataGridSortingApiRef.parameters?.docs?.source}}};const __namedExportsOrder=["Default","ComparatorSortingGrid","OrderSortingGrid","DisableSortingGrid","MultiSortingGrid","DataGridSortingApiRef"]}}]);