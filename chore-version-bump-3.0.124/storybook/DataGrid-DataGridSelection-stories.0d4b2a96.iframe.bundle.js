"use strict";(self.webpackChunk_monorail_storybook=self.webpackChunk_monorail_storybook||[]).push([[9460],{"./src/DataGrid/DataGridSelection.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CheckboxSelectionGrid:()=>CheckboxSelectionGrid,ControlledSelectionGrid:()=>ControlledSelectionGrid,ControlledSelectionServerPaginationGrid:()=>ControlledSelectionServerPaginationGrid,DataGridSelectionApiRef:()=>DataGridSelectionApiRef,Default:()=>Default,DisableClickSelectionGrid:()=>DisableClickSelectionGrid,DisableRowSelection:()=>DisableRowSelection,MultipleRowSelectionGrid:()=>MultipleRowSelectionGrid,RangeSelection:()=>RangeSelection,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js"),_monorail_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../components/src/DataGrid/DataGrid.tsx"),_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/helpers/storybook.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Data Grid/Selection",component:_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,parameters:{creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}}},Template=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:10,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...data,...args})})})),Default=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)(Template);Default.parameters={docs:{description:{component:"Selection allows the user to select and highlight a number of rows that they can then take action on.\n\n### Row selection\n\nRow selection can be performed with a simple mouse click, or using the  [keyboard shortcuts](https://mui.com/components/data-grid/accessibility/#selection). The grid supports single and multiple row selection.\n\n### Single row selection\n\nSingle row selection is enable by default with the  `DataGrid`  component. To unselect a row, hold the  CTRL  key and click on it. For the  `DataGridPro`, you need to disable multiple row selection with  `disableMultipleSelection={true}`."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const MultipleRowSelectionGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));MultipleRowSelectionGrid.storyName="Multiple row selection",MultipleRowSelectionGrid.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro`\n      \nTo select multiple rows on the `DataGridPro` component, hold the `CTRL` key while selecting rows."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const CheckboxSelectionGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:10,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{checkboxSelection:!0,...args,...data})})}));CheckboxSelectionGrid.storyName="Checkbox selection",CheckboxSelectionGrid.parameters={docs:{description:{story:"To activate checkbox selection set `checkboxSelection={true}`."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const DisableClickSelectionGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:10,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{checkboxSelection:!0,disableRowSelectionOnClick:!0,...args,...data})})}));DisableClickSelectionGrid.storyName="Disable selection on click",DisableClickSelectionGrid.parameters={docs:{description:{story:"You might have interactive content in the cells and need to disable the selection of the row on click. Use the `disableSelectionOnClick` prop in this case."},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}}};const DisableRowSelection=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:100,maxColumns:6});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,...data,isRowSelectable:params=>params.row.quantity>5e4,checkboxSelection:!0})})}));DisableRowSelection.storyName="Disable selection on certain rows",DisableRowSelection.parameters={docs:{description:{story:"Use the  `isRowSelectable`  prop to indicate if a row can be selected. It's called with a  `GridRowParams`  object and should return a boolean value. If not specified, all rows are selectable.\n\nIn the demo below only rows with quantity above 50000 can be selected:"}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ControlledSelectionGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:10,maxColumns:6}),[selectionModel,setSelectionModel]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{checkboxSelection:!0,onRowSelectionModelChange:newSelectionModel=>{setSelectionModel(newSelectionModel)},rowSelectionModel:selectionModel,...data,...args})})}));ControlledSelectionGrid.storyName="Controlled selection",ControlledSelectionGrid.parameters={docs:{description:{story:"Use the `selectionModel` prop to control the selection. Each time this prop changes, the `onSelectionModelChange` callback is called with the new selection value."}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const ControlledSelectionServerPaginationGrid=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((args=>{const{data}=(0,_mui_x_data_grid_generator__WEBPACK_IMPORTED_MODULE_4__.PT)({dataSet:"Commodity",rowLength:100,maxColumns:6}),[page,setPage]=react__WEBPACK_IMPORTED_MODULE_0__.useState(0),[rows,setRows]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),[loading,setLoading]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),[selectionModel,setSelectionModel]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),prevSelectionModel=react__WEBPACK_IMPORTED_MODULE_0__.useRef(selectionModel);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{let active=!0;return(async()=>{setLoading(!0);const newRows=await function loadServerRows(page,data){return new Promise((resolve=>{setTimeout((()=>{resolve(data.rows.slice(5*page,5*(page+1)))}),500*Math.random()+100)}))}(page,data);active&&(setRows(newRows),setLoading(!1),setTimeout((()=>{setSelectionModel(prevSelectionModel.current)})))})(),()=>{active=!1}}),[page,data]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{height:400,width:"100%"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_monorail_components__WEBPACK_IMPORTED_MODULE_3__._,{...args,rows,columns:data.columns,pagination:!0,checkboxSelection:!0,pageSizeOptions:[5],rowCount:100,paginationMode:"server",onPaginationModelChange:newPaginationModel=>{prevSelectionModel.current=selectionModel,setPage(newPaginationModel.page)},onRowSelectionModelChange:newSelectionModel=>{setSelectionModel(newSelectionModel)},rowSelectionModel:selectionModel,loading})})}));ControlledSelectionServerPaginationGrid.storyName="Usage with server-side pagination",ControlledSelectionServerPaginationGrid.parameters={docs:{description:{story:'Using the controlled selection with  `paginationMode="server"`  may result in selected rows being lost when the page is changed. This happens because the grid cross-checks with the  `rows`  prop and only calls  `onSelectionModelChange`  with existing row IDs. Depending on your server-side implementation, when the page changes and the new value for the  `rows`  prop does not include previously selected rows, the grid will call  `onSelectionModelChange`  with an empty value. To prevent this unwanted behavior, there are two ways:\n\n-   Save the  `selectionModel`  **before the page is changed**  and restore it later\n-   Append the newly loaded rows to the existing rows\n\nThe following demo shows how to implement the first solution:'}},creevey:{skip:"Mismatch expected because data gets regenerated by mui/x-data-grid-generator."}};const DataGridSelectionApiRef=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));DataGridSelectionApiRef.storyName="apiRef",DataGridSelectionApiRef.parameters={docs:{description:{story:"❗️ Only available in `DataGridPro` [apiRef](https://mui.com/components/data-grid/editing/#apiref)\n      \nThe grid exposes a set of methods that enables all of these features using the imperative apiRef.\n\n> ⚠️ Only use this API when you have no alternative. Always start from the declarative API that the grid exposes.\n\n-   `getSelectedRows()`: Returns an array of the selected rows.\n-   `isRowSelected()`: Determines if a row is selected or not.\n-   `selectRow()`: Change the selection state of a row.\n-   `selectRows()`: Change the selection state of multiple rows.\n-   `setSelectionModel()`: Updates the selected rows to be those passed to the `rowIds` argument. Any row already selected will be unselected."}},creevey:{skip:"Story relies on DataGridPro (paid) which we don't have yet."}};const RangeSelection=(0,_helpers_storybook_js__WEBPACK_IMPORTED_MODULE_1__.yg)((()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{})));RangeSelection.storyName="Row selection",RangeSelection.parameters={docs:{description:{story:">🚧 This feature isn't implemented yet. It's coming.\n\nWith this feature, you will be able to select ranges of cells across the Grid."}},creevey:{skip:"🚧 This feature isn't implemented yet. It's coming."}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"story(Template)",...Default.parameters?.docs?.source}}},MultipleRowSelectionGrid.parameters={...MultipleRowSelectionGrid.parameters,docs:{...MultipleRowSelectionGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => {\n  // const { data } = useDemoData({\n  //   dataSet: 'Commodity',\n  //   rowLength: 10,\n  //   maxColumns: 6,\n  // })\n\n  return <></>\n  // TODO(storybook): Uncomment once we have DataGridPro (paid)\n  // <div style={{ height: 400, width: '100%' }}>\n  //   <DataGridPro {...data} />\n  // </div>\n  ;\n})",...MultipleRowSelectionGrid.parameters?.docs?.source},description:{story:"Multiple row selection",...MultipleRowSelectionGrid.parameters?.docs?.description}}},CheckboxSelectionGrid.parameters={...CheckboxSelectionGrid.parameters,docs:{...CheckboxSelectionGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid checkboxSelection {...args} {...data} />\n    </div>;\n})",...CheckboxSelectionGrid.parameters?.docs?.source},description:{story:"Checkbox selection",...CheckboxSelectionGrid.parameters?.docs?.description}}},DisableClickSelectionGrid.parameters={...DisableClickSelectionGrid.parameters,docs:{...DisableClickSelectionGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid checkboxSelection disableRowSelectionOnClick {...args} {...data} />\n    </div>;\n})",...DisableClickSelectionGrid.parameters?.docs?.source},description:{story:"Disable selection on click",...DisableClickSelectionGrid.parameters?.docs?.description}}},DisableRowSelection.parameters={...DisableRowSelection.parameters,docs:{...DisableRowSelection.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6\n  });\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid {...args} {...data} isRowSelectable={(params: GridRowParams<{\n      quantity: number;\n    }>) => params.row.quantity > 50000} checkboxSelection />\n    </div>;\n})",...DisableRowSelection.parameters?.docs?.source},description:{story:"Disable selection on certain rows",...DisableRowSelection.parameters?.docs?.description}}},ControlledSelectionGrid.parameters={...ControlledSelectionGrid.parameters,docs:{...ControlledSelectionGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 6\n  });\n  const [selectionModel, setSelectionModel] = React.useState<GridRowSelectionModel>([]);\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n      <DataGrid checkboxSelection onRowSelectionModelChange={newSelectionModel => {\n      setSelectionModel(newSelectionModel);\n    }} rowSelectionModel={selectionModel} {...data} {...args} />\n    </div>;\n})",...ControlledSelectionGrid.parameters?.docs?.source},description:{story:"Controlled selection",...ControlledSelectionGrid.parameters?.docs?.description}}},ControlledSelectionServerPaginationGrid.parameters={...ControlledSelectionServerPaginationGrid.parameters,docs:{...ControlledSelectionServerPaginationGrid.parameters?.docs,source:{originalSource:"story<DataGridProps>(args => {\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 6\n  });\n  const [page, setPage] = React.useState(0);\n  const [rows, setRows] = React.useState<GridRowsProp>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [selectionModel, setSelectionModel] = React.useState<GridRowSelectionModel>([]);\n  const prevSelectionModel = React.useRef<GridRowSelectionModel>(selectionModel);\n  React.useEffect(() => {\n    let active = true;\n    (async () => {\n      setLoading(true);\n      const newRows = await loadServerRows(page, data);\n      if (!active) {\n        return;\n      }\n      setRows(newRows);\n      setLoading(false);\n      setTimeout(() => {\n        setSelectionModel(prevSelectionModel.current);\n      });\n    })();\n    return () => {\n      active = false;\n    };\n  }, [page, data]);\n  return <div style={{\n    height: 400,\n    width: '100%'\n  }}>\n        <DataGrid {...args} rows={rows} columns={data.columns} pagination checkboxSelection pageSizeOptions={[5]} rowCount={100} paginationMode=\"server\" onPaginationModelChange={newPaginationModel => {\n      prevSelectionModel.current = selectionModel;\n      setPage(newPaginationModel.page);\n    }} onRowSelectionModelChange={newSelectionModel => {\n      setSelectionModel(newSelectionModel);\n    }} rowSelectionModel={selectionModel} loading={loading} />\n      </div>;\n})",...ControlledSelectionServerPaginationGrid.parameters?.docs?.source}}},DataGridSelectionApiRef.parameters={...DataGridSelectionApiRef.parameters,docs:{...DataGridSelectionApiRef.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...DataGridSelectionApiRef.parameters?.docs?.source},description:{story:"apiRef - Selection",...DataGridSelectionApiRef.parameters?.docs?.description}}},RangeSelection.parameters={...RangeSelection.parameters,docs:{...RangeSelection.parameters?.docs,source:{originalSource:"story<DataGridProps>(() => <></>)",...RangeSelection.parameters?.docs?.source},description:{story:"Range selection",...RangeSelection.parameters?.docs?.description}}};const __namedExportsOrder=["Default","MultipleRowSelectionGrid","CheckboxSelectionGrid","DisableClickSelectionGrid","DisableRowSelection","ControlledSelectionGrid","ControlledSelectionServerPaginationGrid","DataGridSelectionApiRef","RangeSelection"];try{MultipleRowSelectionGrid.displayName="MultipleRowSelectionGrid",MultipleRowSelectionGrid.__docgenInfo={description:"Multiple row selection",displayName:"MultipleRowSelectionGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridSelection.stories.tsx#MultipleRowSelectionGrid"]={docgenInfo:MultipleRowSelectionGrid.__docgenInfo,name:"MultipleRowSelectionGrid",path:"src/DataGrid/DataGridSelection.stories.tsx#MultipleRowSelectionGrid"})}catch(__react_docgen_typescript_loader_error){}try{CheckboxSelectionGrid.displayName="CheckboxSelectionGrid",CheckboxSelectionGrid.__docgenInfo={description:"Checkbox selection",displayName:"CheckboxSelectionGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridSelection.stories.tsx#CheckboxSelectionGrid"]={docgenInfo:CheckboxSelectionGrid.__docgenInfo,name:"CheckboxSelectionGrid",path:"src/DataGrid/DataGridSelection.stories.tsx#CheckboxSelectionGrid"})}catch(__react_docgen_typescript_loader_error){}try{DisableClickSelectionGrid.displayName="DisableClickSelectionGrid",DisableClickSelectionGrid.__docgenInfo={description:"Disable selection on click",displayName:"DisableClickSelectionGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridSelection.stories.tsx#DisableClickSelectionGrid"]={docgenInfo:DisableClickSelectionGrid.__docgenInfo,name:"DisableClickSelectionGrid",path:"src/DataGrid/DataGridSelection.stories.tsx#DisableClickSelectionGrid"})}catch(__react_docgen_typescript_loader_error){}try{DisableRowSelection.displayName="DisableRowSelection",DisableRowSelection.__docgenInfo={description:"Disable selection on certain rows",displayName:"DisableRowSelection",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridSelection.stories.tsx#DisableRowSelection"]={docgenInfo:DisableRowSelection.__docgenInfo,name:"DisableRowSelection",path:"src/DataGrid/DataGridSelection.stories.tsx#DisableRowSelection"})}catch(__react_docgen_typescript_loader_error){}try{ControlledSelectionGrid.displayName="ControlledSelectionGrid",ControlledSelectionGrid.__docgenInfo={description:"Controlled selection",displayName:"ControlledSelectionGrid",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridSelection.stories.tsx#ControlledSelectionGrid"]={docgenInfo:ControlledSelectionGrid.__docgenInfo,name:"ControlledSelectionGrid",path:"src/DataGrid/DataGridSelection.stories.tsx#ControlledSelectionGrid"})}catch(__react_docgen_typescript_loader_error){}try{DataGridSelectionApiRef.displayName="DataGridSelectionApiRef",DataGridSelectionApiRef.__docgenInfo={description:"apiRef - Selection",displayName:"DataGridSelectionApiRef",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridSelection.stories.tsx#DataGridSelectionApiRef"]={docgenInfo:DataGridSelectionApiRef.__docgenInfo,name:"DataGridSelectionApiRef",path:"src/DataGrid/DataGridSelection.stories.tsx#DataGridSelectionApiRef"})}catch(__react_docgen_typescript_loader_error){}try{RangeSelection.displayName="RangeSelection",RangeSelection.__docgenInfo={description:"Range selection",displayName:"RangeSelection",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DataGrid/DataGridSelection.stories.tsx#RangeSelection"]={docgenInfo:RangeSelection.__docgenInfo,name:"RangeSelection",path:"src/DataGrid/DataGridSelection.stories.tsx#RangeSelection"})}catch(__react_docgen_typescript_loader_error){}}}]);