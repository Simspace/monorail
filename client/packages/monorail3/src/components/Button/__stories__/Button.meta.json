{
  "!!!!! DO NOT EDIT THIS FILE !!!!!!": {
    "REGENERATE THIS WITH ONE OF THE FOLLOWING": [
      "yarn docgen ./packages/monorail3/src/components/Button/Button.tsx",
      "yarn docgen:all"
    ]
  },
  "parameters": { "docs": { "description": { "component": "" } } },
  "argTypes": {
    "action": {
      "description": "A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",
      "name": "action",
      "required": false,
      "type": { "name": "Ref<ButtonBaseActions>", "required": false },
      "table": { "type": { "summary": "Ref<ButtonBaseActions>" } },
      "control": { "type": null }
    },
    "centerRipple": {
      "description": "If `true`, the ripples are centered.\nThey won't start at the cursor interaction position.",
      "name": "centerRipple",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false" }
      },
      "control": { "type": "boolean" }
    },
    "children": {
      "description": "The content of the component.",
      "name": "children",
      "required": false,
      "type": {
        "name": "string | number | boolean | {} | ReactElement<any, string | JSXElementConstructor<any>> | ReactNodeArray | ReactPortal | null",
        "required": false
      },
      "table": {
        "type": {
          "summary": "string | number | boolean | {} | ReactElement<any, string | JSXElementConstructor<any>> | ReactNodeArray | ReactPortal | null"
        }
      },
      "control": { "type": null }
    },
    "classes": {
      "description": "Override or extend the styles applied to the component.",
      "name": "classes",
      "required": false,
      "type": {
        "name": "(Partial<ButtonClasses> & Partial<ClassNameMap<never>>)",
        "required": false
      },
      "table": {
        "type": {
          "summary": "(Partial<ButtonClasses> & Partial<ClassNameMap<never>>)"
        }
      },
      "control": { "type": null }
    },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "name": "color",
      "required": false,
      "type": {
        "name": "\"inherit\" | \"primary\" | \"secondary\"",
        "required": false
      },
      "table": {
        "type": { "summary": "\"inherit\" | \"primary\" | \"secondary\"" },
        "defaultValue": { "summary": "'primary'" }
      },
      "control": {
        "type": "radio",
        "options": ["inherit", "primary", "secondary"]
      }
    },
    "disabled": {
      "description": "If `true`, the component is disabled.",
      "name": "disabled",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false\nfalse" }
      },
      "control": { "type": "boolean" }
    },
    "disableElevation": {
      "description": "If `true`, no elevation is used.",
      "name": "disableElevation",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false" }
      },
      "control": { "type": "boolean" }
    },
    "disableFocusRipple": {
      "description": "If `true`, the  keyboard focus ripple is disabled.",
      "name": "disableFocusRipple",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false" }
      },
      "control": { "type": "boolean" }
    },
    "disableRipple": {
      "description": "If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `.Mui-focusedVisible` class.",
      "name": "disableRipple",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false" }
      },
      "control": { "type": "boolean" }
    },
    "disableTouchRipple": {
      "description": "If `true`, the touch ripple effect is disabled.",
      "name": "disableTouchRipple",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false" }
      },
      "control": { "type": "boolean" }
    },
    "endIcon": {
      "description": "Element placed after the children.",
      "name": "endIcon",
      "required": false,
      "type": { "name": "ReactNode", "required": false },
      "table": { "type": { "summary": "ReactNode" } },
      "control": { "type": "object" }
    },
    "focusRipple": {
      "description": "If `true`, the base button will have a keyboard focus ripple.",
      "name": "focusRipple",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false" }
      },
      "control": { "type": "boolean" }
    },
    "focusVisibleClassName": {
      "description": "This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\nif needed.",
      "name": "focusVisibleClassName",
      "required": false,
      "type": { "name": "string", "required": false },
      "table": { "type": { "summary": "string" } },
      "control": { "type": "text" }
    },
    "fullWidth": {
      "description": "If `true`, the button will take up the full width of its container.",
      "name": "fullWidth",
      "required": false,
      "type": { "name": "boolean", "required": false },
      "table": {
        "type": { "summary": "boolean" },
        "defaultValue": { "summary": "false" }
      },
      "control": { "type": "boolean" }
    },
    "href": {
      "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
      "name": "href",
      "required": false,
      "type": { "name": "string", "required": false },
      "table": { "type": { "summary": "string" } },
      "control": { "type": "text" }
    },
    "LinkComponent": {
      "description": "The component used to render a link when the `href` prop is provided.",
      "name": "LinkComponent",
      "required": false,
      "type": { "name": "ElementType<any>", "required": false },
      "table": {
        "type": { "summary": "ElementType<any>" },
        "defaultValue": { "summary": "'a'" }
      },
      "control": { "type": null }
    },
    "onFocusVisible": {
      "description": "Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",
      "name": "onFocusVisible",
      "required": false,
      "type": { "name": "FocusEventHandler<any>", "required": false },
      "table": { "type": { "summary": "FocusEventHandler<any>" } },
      "control": { "type": null }
    },
    "size": {
      "description": "The size of the component.\n`small` is equivalent to the dense button styling.",
      "name": "size",
      "required": false,
      "type": {
        "name": "\"small\" | \"medium\" | \"large\"",
        "required": false
      },
      "table": {
        "type": { "summary": "\"small\" | \"medium\" | \"large\"" },
        "defaultValue": { "summary": "'medium'" }
      },
      "control": { "type": "radio", "options": ["small", "medium", "large"] }
    },
    "startIcon": {
      "description": "Element placed before the children.",
      "name": "startIcon",
      "required": false,
      "type": { "name": "ReactNode", "required": false },
      "table": { "type": { "summary": "ReactNode" } },
      "control": { "type": "object" }
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "name": "sx",
      "required": false,
      "type": {
        "name": "SystemCssProperties<Theme> | CSSPseudoSelectorProps<Theme> | CSSSelectorObject<Theme> | null",
        "required": false
      },
      "table": {
        "type": {
          "summary": "SystemCssProperties<Theme> | CSSPseudoSelectorProps<Theme> | CSSSelectorObject<Theme> | null"
        }
      },
      "control": { "type": null }
    },
    "tabIndex": {
      "description": "",
      "name": "tabIndex",
      "required": false,
      "type": { "name": "string | number", "required": false },
      "table": {
        "type": { "summary": "string | number" },
        "defaultValue": { "summary": "0" }
      },
      "control": { "type": "radio", "options": ["string", "number"] }
    },
    "TouchRippleProps": {
      "description": "Props applied to the `TouchRipple` element.",
      "name": "TouchRippleProps",
      "required": false,
      "type": { "name": "Partial<TouchRippleProps>", "required": false },
      "table": { "type": { "summary": "Partial<TouchRippleProps>" } },
      "control": { "type": null }
    },
    "variant": {
      "description": "The variant to use.",
      "name": "variant",
      "required": false,
      "type": {
        "name": "\"text\" | \"outlined\" | \"contained\"",
        "required": false
      },
      "table": {
        "type": { "summary": "\"text\" | \"outlined\" | \"contained\"" },
        "defaultValue": { "summary": "'text'" }
      },
      "control": {
        "type": "radio",
        "options": ["text", "outlined", "contained"]
      }
    }
  }
}
