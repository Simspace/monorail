import { Project } from 'ts-morph'

// Compile this script using `yarn tsc` - this puts the output .js file in dist/tools/
// Run this script from the root of monorail3 using `yarn gen`

// This script generates a set of files in monorail3 for a list of MUI components.
// This might include a module for component types/aliases/wrappers, storybook-related files, and tests.
// Note: this script doesn't attempt to format/prettier the file - this is done separately

const codeGenMessage =
  '// WARNING: This file is generated by a script, do not edit'

const consoleLogBanner = (msg: string): void => {
  console.log('-------------------------------------------------')
  console.log(msg)
  console.log('-------------------------------------------------')
}

/**
 * Folders in which to organize components in storybook
 */
export type StorybookFolder = 'Buttons' | 'Data Display' | 'Forms' | 'Layout'

export const storybookFolders = {
  buttons: 'Buttons' as const,
  dataDisplay: 'Data Display' as const,
  forms: 'Forms' as const,
  layout: 'Layout' as const,
}

/**
 * Metadata about an MUI module for the purpose of generating code
 */
type ModuleInfo = {
  name: string
  muiModuleFileName?: string
  muiPropsTypeName?: string
  muiComponentName?: string
  monorailComponentExtraImports?: Array<string>
  storybookFolder: StorybookFolder
}

/**
 * Gets the file name of a file in MUI
 */
const getMuiModuleFileName = (module: ModuleInfo): string =>
  module.muiModuleFileName !== undefined
    ? module.muiModuleFileName
    : `${module.name}.d.ts`

/**
 * Gets the name of the Props type for a MUI component
 */
const getMuiPropsTypeName = (module: ModuleInfo): string =>
  module.muiPropsTypeName !== undefined
    ? module.muiPropsTypeName
    : module.name + 'Props'

/**
 * Gets the name of a MUI component function
 */
const getMuiComponentName = (module: ModuleInfo): string =>
  module.muiComponentName !== undefined ? module.muiComponentName : module.name

/**
 * Gets the name of the Props type for the Monorail component
 */
const getMonorailPropsTypeName = (module: ModuleInfo): string =>
  `${module.name}Props`

/**
 * Gets the name of a component in Monorail
 */
const getMonorailComponentName = (module: ModuleInfo): string => module.name

/**
 * Gets a list of extra imports to include in the Monorail component wrapper module
 *
 * These are case-by-case imports depending on how the MUI types are encoded for each component.
 */
const getMonorailComponentExtraImports = (module: ModuleInfo): Array<string> =>
  module.monorailComponentExtraImports !== undefined
    ? module.monorailComponentExtraImports
    : []

/**
 * Base organizational "folder" names for components in storybook
 */

// List of all the modules to generate, including extra metadata to help the code gen
const modules: Array<ModuleInfo> = [
  { name: 'Accordion', storybookFolder: storybookFolders.dataDisplay },
  { name: 'AccordionDetails', storybookFolder: storybookFolders.dataDisplay },
  {
    name: 'AccordionSummary',
    monorailComponentExtraImports: [
      "import { AccordionSummaryTypeMap } from '@material-ui/core/AccordionSummary'",
    ],
    storybookFolder: storybookFolders.dataDisplay,
  },
  {
    name: 'Button',
    monorailComponentExtraImports: [
      "import { ButtonTypeMap } from '@material-ui/core/Button'",
    ],
    storybookFolder: storybookFolders.buttons,
  },
]

// Create the ts-morph project
const project = new Project({})

// Add all the material-ui/core ts files
project.addSourceFilesAtPaths(
  './node_modules/@material-ui/core/**/*{.d.ts,.ts,.tsx}',
)

// Add the monorial3 src files
project.addSourceFilesAtPaths('./src/**/*{.d.ts,.ts,.tsx}')

//project.resolveSourceFileDependencies()

// Get all the source files to inspect
const sourceFiles = project.getSourceFiles()

console.log('Found source files: ', sourceFiles.length)

modules.forEach(module => {
  consoleLogBanner(`Handling module: ${module.name}`)

  const muiModuleFileName = getMuiModuleFileName(module)

  sourceFiles.forEach(sourceFile => {
    if (sourceFile.getBaseName() !== muiModuleFileName) {
      return
    }

    const muiComponentName = getMuiComponentName(module)

    const muiPropsTypeName = getMuiPropsTypeName(module)

    // Try to find the MUI component props type/interface in the MUI source file
    // We're doing this because we need to preserve the type parameters from the MUI props in our
    // props type alias, and in the component function.
    const muiPropsTypeAliasOrInterface =
      sourceFile.getTypeAlias(muiPropsTypeName) ||
      sourceFile.getInterface(muiPropsTypeName)

    const muiPropsTypeParameters =
      muiPropsTypeAliasOrInterface?.getTypeParameters() || []

    // The Props type parameters for the LHS of a declaration - this includes the type constraints and default types,
    // like <D extends React.ElementType<any> = "button", P = {}>
    const muiPropsTypeParametersLhsString =
      muiPropsTypeParameters.length > 0
        ? '<' + muiPropsTypeParameters.map(tp => tp.print()) + '>'
        : ''

    // The Props type parameters for the RHS of a declaration - this is just the type params like <D, P>
    const muiPropsTypeParametersRhsString =
      muiPropsTypeParameters.length > 0
        ? '<' + muiPropsTypeParameters.map(tp => tp.getName()).join(', ') + '>'
        : ''

    const monorailPropsTypeName = getMonorailPropsTypeName(module)
    const monorailComponentName = getMonorailComponentName(module)
    const monorailComponentFilePath = `./src/components/${monorailComponentName}/${monorailComponentName}.tsx`
    const monorailComponentExtraFilePath = `./src/components/${monorailComponentName}/${monorailComponentName}.extra.tsx`
    const monorailComponentStoryHelpersFilePath = `./src/components/${monorailComponentName}/__stories__/${monorailComponentName}.storyHelpers.tsx`
    const monorailComponentStoriesFilePath = `./src/components/${monorailComponentName}/__stories__/${monorailComponentName}.stories.tsx`

    // Create the monorial component file with the props type and the component wrapper
    // This is an "always regenerate" file, so should always be over-written
    console.log(`Generating main component file: ${monorailComponentFilePath}`)
    project.createSourceFile(
      monorailComponentFilePath,
      writer => {
        // Write out code gen warning message
        writer.writeLine(codeGenMessage)
        // Write out imports
        writer.writeLine("import React from 'react'")
        writer.writeLine("import * as MUI from '@material-ui/core'")
        getMonorailComponentExtraImports(module).forEach(extraImport =>
          writer.writeLine(extraImport),
        )
        // Write out Props type alias
        writer.writeLine(
          `export type ${monorailPropsTypeName}${muiPropsTypeParametersLhsString} = MUI.${muiPropsTypeName}${muiPropsTypeParametersRhsString}`,
        )
        // Write out the component wrapper function
        writer.writeLine(
          `export const ${monorailComponentName} = ${muiPropsTypeParametersLhsString}(props: ${monorailPropsTypeName}${muiPropsTypeParametersRhsString}) => (<MUI.${muiComponentName} {...props} />)`,
        )
      },
      { overwrite: true },
    )

    // Create the '.extra.tsx' file if it doesn't exist
    // This file is intended to house extra types/functions/etc. for the component
    console.log(
      `Generating component extra file (if needed): ${monorailComponentExtraFilePath}`,
    )
    const componentExtraFile = project.getSourceFile(
      monorailComponentExtraFilePath,
    )
    if (componentExtraFile === undefined) {
      project.createSourceFile(monorailComponentExtraFilePath, writer => {
        // Just an empty export b/c we need to export something
        writer.writeLine(
          '// Placeholder for extra functionality - add extra types/values/functions/etc.',
        )
        writer.writeLine(
          `import { ${monorailComponentName} as _${monorailComponentName}, ${monorailPropsTypeName} as _${monorailPropsTypeName} } from './${monorailComponentName}'`,
        )
        //writer.writeLine('export const __monorailExtra = {}')
      })
    }

    // Generate the __stories__ files
    console.log(
      `Generating storybook helper file: ${monorailComponentStoryHelpersFilePath}`,
    )
    project.createSourceFile(
      monorailComponentStoryHelpersFilePath,
      writer => {
        writer.writeLine(codeGenMessage)
        writer.writeLine("import React from 'react'")
        writer.writeLine(
          `import { story } from '../../../__tests__/helpers/storybook'`,
        )
        writer.writeLine(
          `import { ${monorailComponentName}, ${monorailPropsTypeName} } from '../${monorailComponentName}'`,
        )

        writer.writeLine(
          `/** This is intended to be exported (with possible extensions) as the default meta object for a story */`,
        )
        writer.writeLine(
          `export const defaultStoryMeta = { title: '${module.storybookFolder}/${monorailComponentName}', component: ${monorailComponentName} }`,
        )

        /* Difficult to generate args/template b/c it varies per component, and MUI tends to have runtime issues if the Components aren't rendered in certain ways
        writer.writeLine(
          `export const defaultArgs: ${monorailPropsTypeName} = { children: '${monorailComponentName}' }`,
        )
        writer.writeLine(
          `export const Template = story<${monorailPropsTypeName}>((args) => <${monorailComponentName} {...args}>{defaultArgs.children}</${monorailComponentName}>)`,
        )
        */
      },
      {
        overwrite: true,
      },
    )

    // Create the base `.stories.tsx` file - this is intended to be edited by hand going forward
    console.log(
      `Generating stories file (if needed): ${monorailComponentStoriesFilePath}`,
    )
    const componentStoriesFile = project.getSourceFile(
      monorailComponentStoriesFilePath,
    )
    if (componentStoriesFile === undefined) {
      project.createSourceFile(monorailComponentStoriesFilePath, writer => {
        writer.writeLine(`// Edit this file to add new stories`)
        writer.writeLine(`import React from 'react'`)
        writer.writeLine(
          `import { ${monorailComponentName}, ${monorailPropsTypeName} } from '../${monorailComponentName}'`,
        )
        writer.writeLine(
          `import { story } from '../../../__tests__/helpers/storybook'`,
        )
        writer.writeLine(
          `import { defaultStoryMeta } from './${monorailComponentName}.storyHelpers'`,
        )

        writer.writeLine(
          `/** Metadata for these stories - update/extend as needed */`,
        )
        writer.writeLine(`export default { ...defaultStoryMeta }`)

        writer.writeLine(`/** Story template - update as needed */`)
        writer.writeLine(
          `const Template = story<${monorailPropsTypeName}>((args) => <${monorailComponentName} {...args} />, { args: {} })`,
        )

        writer.writeLine(`/** Default story (edit as needed) */`)
        writer.writeLine(`export const Default = story(Template, {})`)

        writer.writeLine(`// TODO: add more stories below`)
      })
    }
  })
})

console.log('Saving ts-morph project...')
project.saveSync()

console.log('Done!')
